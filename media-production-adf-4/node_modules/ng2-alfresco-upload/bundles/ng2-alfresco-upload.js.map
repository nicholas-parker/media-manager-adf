{"version":3,"file":"./bundles/ng2-alfresco-upload.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 015875b2c24650644d82","webpack:///external \"@angular/core\"","webpack:///external \"ng2-alfresco-core\"","webpack:///./src/components/file-uploading-list.component.ts","webpack:///./src/components/file-uploading-dialog.component.ts","webpack:///./src/components/file-uploading-list-row.component.ts","webpack:///./src/components/upload-button.component.ts","webpack:///./src/components/upload-drag-area.component.ts","webpack:///./src/directives/file-draggable.directive.ts","webpack:///external \"rxjs/Rx\"","webpack:///./src/models/permissions.model.ts","webpack:///./src/material.module.ts","webpack:///./src/components/upload-drag-area.component.css","webpack:///./~/css-loader/lib/css-base.js","webpack:///./src/components/file-uploading-dialog.component.html","webpack:///./src/components/file-uploading-list-row.component.html","webpack:///./src/components/file-uploading-list.component.html","webpack:///./src/components/upload-button.component.html","webpack:///./src/components/upload-drag-area.component.html","webpack:///./src/components/file-uploading-dialog.component.scss","webpack:///./src/components/file-uploading-list-row.component.scss","webpack:///./src/components/file-uploading-list.component.scss","webpack:///./src/components/upload-button.component.scss","webpack:///./src/components/upload-drag-area.component.css?9519","webpack:///./src/components/file-uploading-dialog.component.scss?5ed7","webpack:///./src/components/file-uploading-list-row.component.scss?337a","webpack:///./src/components/file-uploading-list.component.scss?9177","webpack:///./src/components/upload-button.component.scss?b418","webpack:///external \"@angular/material\"","webpack:///./index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"ng2-alfresco-core\", \"rxjs/Rx\", \"@angular/material\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-alfresco-upload\"] = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"));\n\telse\n\t\troot[\"ng2-alfresco-upload\"] = factory(root[\"@angular/core\"], root[\"ng2-alfresco-core\"], root[\"rxjs/Rx\"], root[\"@angular/material\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_27__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 015875b2c24650644d82","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 1\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { AlfrescoTranslationService, FileModel, FileUploadStatus, NodesApiService, NotificationService, UploadService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\n\n@Component({\n    selector: 'adf-file-uploading-list, alfresco-file-uploading-list',\n    template: require('./file-uploading-list.component.html'),\n    styles: [require('./file-uploading-list.component.scss')]\n})\nexport class FileUploadingListComponent {\n\n    FileUploadStatus = FileUploadStatus;\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    @Input()\n    files: FileModel[] = [];\n\n    constructor(\n        private uploadService: UploadService,\n        private nodesApi: NodesApiService,\n        private notificationService: NotificationService,\n        private translateService: AlfrescoTranslationService) {\n    }\n\n    /**\n     * Cancel file upload\n     *\n     * @param {FileModel} file File model to cancel upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    cancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n\n    removeFile(file: FileModel): void {\n        this.deleteNode(file)\n            .subscribe(() => {\n                if ( file.status === FileUploadStatus.Error) {\n                    this.notifyError(file);\n                }\n\n                this.uploadService.cancelUpload(file);\n            });\n    }\n\n    /**\n     * Call the appropriate method for each file, depending on state\n     */\n    cancelAllFiles(): void {\n        this.getUploadingFiles()\n            .forEach((file) => this.uploadService.cancelUpload(file));\n\n        const deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        Observable.forkJoin(...deletedFiles)\n            .subscribe((files: FileModel[]) => {\n                const errors = files\n                    .filter((file) => file.status === FileUploadStatus.Error);\n\n                if (errors.length) {\n                    this.notifyError(...errors);\n                }\n\n                this.uploadService.cancelUpload(...files);\n            });\n    }\n\n    /**\n     * Checks if all the files are uploaded\n     * @returns {boolean} - false if there is at least one file in Progress | Starting | Pending\n     */\n    isUploadCompleted(): boolean {\n         return !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files\n                .some(({status}) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n                );\n    }\n\n    /**\n     * Check if all the files are Cancelled | Aborted | Error.\n     * @returns {boolean} - false if there is at least one file in uploading states\n     */\n    isUploadCancelled(): boolean {\n        return !!this.files.length &&\n            this.files\n                .every(({status}) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n                );\n    }\n\n    private deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi\n            .deleteNode(id, { permanent: true })\n            .map(() => {\n                file.status = FileUploadStatus.Deleted;\n                return file;\n            })\n            .catch((error) => {\n                file.status = FileUploadStatus.Error;\n                return Observable.of(file);\n            });\n    }\n\n    private notifyError(...files: FileModel[]) {\n        let translateSubscription = null;\n\n        if (files.length === 1) {\n            translateSubscription = this.translateService\n                .get(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                    { fileName: files[0].name}\n                );\n        } else {\n            translateSubscription = this.translateService\n                .get(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                    { total: files.length }\n                );\n        }\n\n        translateSubscription\n            .subscribe(message => this.notificationService.openSnackMessage(message, 4000));\n    }\n\n    private getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/file-uploading-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChangeDetectorRef, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FileModel, FileUploadCompleteEvent, FileUploadDeleteEvent,\n         FileUploadErrorEvent, FileUploadStatus, UploadService } from 'ng2-alfresco-core';\nimport { Observable, Subscription } from 'rxjs/Rx';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\n\n@Component({\n    selector: 'adf-file-uploading-dialog, file-uploading-dialog',\n    template: require('./file-uploading-dialog.component.html'),\n    styles: [require('./file-uploading-dialog.component.scss')]\n})\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    @ViewChild(FileUploadingListComponent)\n    uploadList: FileUploadingListComponent;\n\n    @Input()\n    position: string = 'right';\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\n\n    private listSubscription: Subscription;\n    private counterSubscription: Subscription;\n    private fileUploadSubscription: Subscription;\n    private errorSubscription: Subscription;\n\n    constructor(\n        private uploadService: UploadService,\n        private changeDetecor: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.listSubscription = this.uploadService\n            .queueChanged.subscribe((fileList: FileModel[]) => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n        });\n\n        this.counterSubscription = Observable\n            .merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .subscribe((event: (FileUploadDeleteEvent|FileUploadCompleteEvent)) => {\n                this.totalCompleted = event.totalComplete;\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .subscribe((event: FileUploadErrorEvent) => {\n                this.totalErrors = event.totalError;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService\n            .fileUpload.subscribe(() => {\n                this.changeDetecor.detectChanges();\n            });\n\n        this.uploadService.fileDeleted.subscribe((objId) => {\n            if (this.filesUploadingList) {\n                let file = this.filesUploadingList.find((item) => {\n                    return item.data.entry.id === objId;\n                });\n                if (file) {\n                    file.status = FileUploadStatus.Cancelled;\n                    this.changeDetecor.detectChanges();\n                }\n            }\n        });\n    }\n\n    /**\n     * Toggle confirmation message.\n     */\n    toggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n\n    /**\n     * Cancel uploads and hide confiramtion\n     */\n    cancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n\n    /**\n     * Toggle dialog minimized state.\n     */\n    toggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetecor.detectChanges();\n    }\n\n    /**\n     * Dismiss dialog\n     */\n    close(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetecor.detectChanges();\n    }\n\n    ngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/file-uploading-dialog.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FileModel, FileUploadStatus } from 'ng2-alfresco-core';\n\n@Component({\n    selector: 'adf-file-uploading-list-row',\n    template: require('./file-uploading-list-row.component.html'),\n    styles: [ require('./file-uploading-list-row.component.scss') ]\n})\nexport class FileUploadingListRowComponent {\n    @Input()\n    file: FileModel;\n\n    @Output()\n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    @Output()\n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n\n    onCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n\n    onRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/file-uploading-list-row.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, forwardRef, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport {\n    AlfrescoApiService,\n    AlfrescoTranslationService,\n    EXTENDIBLE_COMPONENT,\n    FileModel,\n    FileUtils,\n    LogService,\n    NodePermissionSubject,\n    NotificationService,\n    UploadService\n} from 'ng2-alfresco-core';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { PermissionModel } from '../models/permissions.model';\n\n@Component({\n    selector: 'adf-upload-button, alfresco-upload-button',\n    template: require('./upload-button.component.html'),\n    styles: [require('./upload-button.component.scss')],\n    providers: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent)}\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadButtonComponent implements OnInit, OnChanges, NodePermissionSubject {\n\n    /** @deprecated Deprecated in 1.6.0, you can use UploadService events and NotificationService api instead. */\n    @Input()\n    showNotificationBar: boolean = true;\n\n    /** @deprecated Deprecated in 1.6.0, this property is not used for couple of releases already. */\n    @Input()\n    currentFolderPath: string = '/';\n\n    /** @deprecated Deprecated in 1.8.0, use the button with combination of adf-node-permission directive */\n    @Input()\n    disableWithNoPermission: boolean = false;\n\n    @Input()\n    disabled: boolean = false;\n\n    @Input()\n    uploadFolders: boolean = false;\n\n    @Input()\n    multipleFiles: boolean = false;\n\n    @Input()\n    versioning: boolean = false;\n\n    @Input()\n    acceptedFilesType: string = '*';\n\n    @Input()\n    staticTitle: string;\n\n    @Input()\n    tooltip: string = null;\n\n    @Input()\n    rootFolderId: string = '-root-';\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    @Output()\n    onError = new EventEmitter();\n\n    @Output()\n    createFolder = new EventEmitter();\n\n    @Output()\n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\n\n    private hasPermission: boolean = false;\n\n    private permissionValue: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private uploadService: UploadService,\n                private translateService: AlfrescoTranslationService,\n                private logService: LogService,\n                private notificationService: NotificationService,\n                private apiService: AlfrescoApiService) {\n    }\n\n    ngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasPermission = permission;\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n\n    isButtonDisabled(): boolean {\n        return this.isForceDisable() || this.isDisableWithNoPermission();\n    }\n\n    isForceDisable(): boolean {\n        return this.disabled ? true : undefined;\n    }\n\n    /** @deprecated Deprecated in 1.8.0, use the button with combination of adf-node-permission directive */\n    isDisableWithNoPermission(): boolean {\n        return !this.hasPermission && this.disableWithNoPermission ? true : undefined;\n    }\n\n    onFilesAdded($event: any): void {\n        let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasPermission) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({type: 'content', action: 'upload', permission: 'create'}));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    onDirectoryAdded($event: any): void {\n        if (this.hasPermission) {\n            let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({type: 'content', action: 'upload', permission: 'create'}));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    /**\n     * Upload a list of file in the specified path\n     * @param files\n     * @param path\n     */\n    uploadFiles(files: File[]): void {\n        const latestFilesAdded: FileModel[] = files\n            .map<FileModel>(this.createFileModel.bind(this))\n            .filter(this.isFileAcceptable.bind(this));\n\n        if (latestFilesAdded.length > 0) {\n            this.uploadService.addToQueue(...latestFilesAdded);\n            this.uploadService.uploadFilesInTheQueue(this.onSuccess);\n            if (this.showNotificationBar) {\n                this.showUndoNotificationBar(latestFilesAdded);\n            }\n        }\n    }\n\n    /**\n     * Creates FileModel from File\n     *\n     * @param file\n     */\n    private createFileModel(file: File): FileModel {\n        return new FileModel(file, {\n            newVersion: this.versioning,\n            parentId: this.rootFolderId,\n            path: (file.webkitRelativePath || '').replace(/\\/[^\\/]*$/, '')\n        });\n    }\n\n    /**\n     * Checks if the given file is allowed by the extension filters\n     *\n     * @param file FileModel\n     */\n    private isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map(ext => ext.replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param {FileModel[]} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    private showUndoNotificationBar(latestFilesAdded: FileModel[]): void {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translateService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translateService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    checkPermission() {\n        if (this.rootFolderId) {\n            this.getFolderNode(this.rootFolderId).subscribe(\n                res => this.permissionValue.next(this.hasCreatePermission(res)),\n                error => this.onError.emit(error)\n            );\n        }\n    }\n\n    // TODO: move to AlfrescoContentService\n    getFolderNode(nodeId: string): Observable<MinimalNodeEntryEntity> {\n        let opts: any = {\n            includeSource: true,\n            include: ['allowableOperations']\n        };\n\n        return Observable.fromPromise(this.apiService.getInstance().nodes.getNodeInfo(nodeId, opts))\n            .catch(err => this.handleError(err));\n    }\n\n    private handleError(error: Response) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n\n    private hasCreatePermission(node: any): boolean {\n        if (node && node.allowableOperations) {\n            return node.allowableOperations.find(permision => permision === 'create') ? true : false;\n        }\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/upload-button.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport {\n    AlfrescoTranslationService,\n    EXTENDIBLE_COMPONENT,\n    FileInfo,\n    FileModel,\n    FileUtils,\n    NodePermissionSubject,\n    NotificationService,\n    UploadService\n} from 'ng2-alfresco-core';\n\n@Component({\n    selector: 'adf-upload-drag-area, alfresco-upload-drag-area',\n    template: require('./upload-drag-area.component.html'),\n    styles: [require('./upload-drag-area.component.css')],\n    providers: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent)}\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadDragAreaComponent implements NodePermissionSubject {\n\n    /** @deprecated Deprecated in favor of disabled input property */\n    @Input()\n    set enabled(enabled: boolean) {\n        console.warn('Deprecated: enabled input property should not be used for UploadDragAreaComponent. Please use disabled instead.');\n        this.disabled = !enabled;\n    }\n\n    /** @deprecated Deprecated in favor of disabled input property */\n    get enabled(): boolean {\n        console.warn('Deprecated: enabled input property should not be used for UploadDragAreaComponent. Please use disabled instead.');\n        return !this.disabled;\n    }\n\n    /** @deprecated Deprecated in 1.6.0, you can use UploadService events and NotificationService api instead. */\n    @Input()\n    showNotificationBar: boolean = true;\n\n    /** @deprecated Deprecated in 1.6.0, this property is not used for couple of releases already. Use rootFolderId instead. */\n    @Input()\n    currentFolderPath: string = '/';\n\n    /** @deprecated Deprecated in 1.6.2, this property is not used for couple of releases already. Use parentId instead. */\n    @Input()\n    rootFolderId: string = '-root-';\n\n    @Input()\n    disabled: boolean = false;\n\n    @Input()\n    versioning: boolean = false;\n\n    @Input()\n    parentId: string;\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    constructor(private uploadService: UploadService,\n                private translateService: AlfrescoTranslationService,\n                private notificationService: NotificationService) {\n    }\n\n    /**\n     * Method called when files are dropped in the drag area.\n     *\n     * @param {File[]} files - files dropped in the drag area.\n     */\n    onFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            const fileModels = files.map(file => new FileModel(file, {\n                newVersion: this.versioning,\n                path: '/',\n                parentId: this.parentId || this.rootFolderId\n            }));\n            this.uploadService.addToQueue(...fileModels);\n            this.uploadService.uploadFilesInTheQueue(this.onSuccess);\n            let latestFilesAdded = this.uploadService.getQueue();\n            if (this.showNotificationBar) {\n                this.showUndoNotificationBar(latestFilesAdded);\n            }\n        }\n    }\n\n    /**\n     * Called when the file are dropped in the drag area\n     *\n     * @param item - FileEntity\n     */\n    onFilesEntityDropped(item: any): void {\n        if (!this.disabled) {\n            item.file((file: File) => {\n                const fileModel = new FileModel(file, {\n                    newVersion: this.versioning,\n                    parentId: this.parentId || this.rootFolderId,\n                    path: item.fullPath.replace(item.name, '')\n                });\n                this.uploadService.addToQueue(fileModel);\n                this.uploadService.uploadFilesInTheQueue(this.onSuccess);\n            });\n            if (this.showNotificationBar) {\n                this.showUndoNotificationBar(item);\n            }\n        }\n    }\n\n    /**\n     * Called when a folder are dropped in the drag area\n     *\n     * @param folder - name of the dropped folder\n     */\n    onFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flattern(folder).then(entries => {\n                let files = entries.map(entry => {\n                    return new FileModel(entry.file, {\n                        newVersion: this.versioning,\n                        parentId: this.parentId || this.rootFolderId,\n                        path: entry.relativeFolder\n                    });\n                });\n                this.uploadService.addToQueue(...files);\n                /* @deprecated in 1.6.0 */\n                if (this.showNotificationBar) {\n                    let latestFilesAdded = this.uploadService.getQueue();\n                    this.showUndoNotificationBar(latestFilesAdded);\n                }\n                this.uploadService.uploadFilesInTheQueue(this.onSuccess);\n            });\n        }\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param {FileModel[]} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    showUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translateService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translateService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    /**\n     * Show the error inside Notification bar\n     *\n     * @param Error message\n     * @private\n     */\n    showErrorNotificationBar(errorMessage: string) {\n        this.notificationService.openSnackMessage(errorMessage, 3000);\n    }\n\n    /** Returns true or false considering the component options and node permissions */\n    isDroppable(): boolean {\n        return !this.disabled;\n    }\n\n    /**\n     * Handles 'upload-files' events raised by child components.\n     *\n     * @param event DOM event\n     */\n    onUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        let isAllowed: boolean = this.hasCreatePermission(event.detail.data.obj.entry);\n        if (isAllowed) {\n            let files: FileInfo[] = event.detail.files;\n            if (files && files.length > 0) {\n                let parentId = this.parentId || this.rootFolderId;\n                if (event.detail.data && event.detail.data.obj.entry.isFolder) {\n                    parentId = event.detail.data.obj.entry.id || this.parentId || this.rootFolderId;\n                }\n                const fileModels = files.map(fileInfo => new FileModel(fileInfo.file, {\n                    newVersion: this.versioning,\n                    path: fileInfo.relativeFolder,\n                    parentId: parentId\n                }));\n                this.uploadFiles(fileModels);\n            }\n        }\n    }\n\n    /**\n     * Does the actual file uploading and show the notification\n     *\n     * @param files\n     */\n    private uploadFiles(files: FileModel[]): void {\n        if (files.length) {\n            this.uploadService.addToQueue(...files);\n            this.uploadService.uploadFilesInTheQueue(this.onSuccess);\n            let latestFilesAdded = this.uploadService.getQueue();\n            if (this.showNotificationBar) {\n                this.showUndoNotificationBar(latestFilesAdded);\n            }\n        }\n    }\n\n    /**\n     * Check if \"create\" permission is present on the given node\n     *\n     * @param node\n     */\n    private hasCreatePermission(node: any): boolean {\n        let isPermitted = false;\n        if (node && node['allowableOperations']) {\n            let permFound = node['allowableOperations'].find(element => element === 'create');\n            isPermitted = permFound ? true : false;\n        }\n        return isPermitted;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/upload-drag-area.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FileUtils } from 'ng2-alfresco-core';\n\n@Directive({\n    selector: '[file-draggable]'\n})\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    @Input('file-draggable')\n    enabled: boolean = true;\n\n    @Output()\n    onFilesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    @Output()\n    onFilesEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    @Output()\n    onFolderEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    private cssClassName: string = 'file-draggable__input-focus';\n    private element: HTMLElement;\n\n    constructor(el: ElementRef, private ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n\n    ngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n\n    /**\n     * Method called when files is dropped in the drag and drop area.\n     * @param event DOM event.\n     */\n    onDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            let items = event.dataTransfer.items;\n            if (items) {\n                for (let i = 0; i < items.length; i++) {\n                    if (typeof items[i].webkitGetAsEntry !== 'undefined') {\n                        let item = items[i].webkitGetAsEntry();\n                        if (item) {\n                            if (item.isFile) {\n                                this.onFilesEntityDropped.emit(item);\n                            } else if (item.isDirectory) {\n                                this.onFolderEntityDropped.emit(item);\n                            }\n                        }\n                    } else {\n                        let files = FileUtils.toFileArray(event.dataTransfer.files);\n                        this.onFilesDropped.emit(files);\n                    }\n                }\n            } else {\n                // safari or FF\n                let files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.onFilesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag in.\n     *\n     * @param {event} event - DOM event.\n     */\n    onDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag out.\n     *\n     * @param {event} event - DOM event.\n     */\n    onDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file is over the drag area.\n     *\n     * @param event\n     */\n    onDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Prevent default and stop propagation of the DOM event.\n     *\n     * @param {event} $event - DOM event.\n     */\n    preventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/directives/file-draggable.directive.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 8\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/permissions.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MdButtonModule,\n    MdIconModule,\n    MdProgressSpinnerModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MdIconModule,\n        MdProgressSpinnerModule,\n        MdButtonModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/material.module.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".upload-border {\\n    vertical-align: middle;\\n    text-align: center;\\n}\\n\\n.file-draggable__input-focus {\\n    color: #2196F3;\\n    border: 1px dashed #2196F3;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/components/upload-drag-area.component.css\n// module id = 11\n// module chunks = 0","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 12\n// module chunks = 0","module.exports = \"<div *ngIf=\\\"isDialogActive\\\"\\n     class=\\\"upload-dialog\\\"\\n     [class.upload-dialog--minimized]=\\\"isDialogMinimized\\\"\\n     [class.upload-dialog--position-left]=\\\"position === 'left'\\\"\\n     [class.upload-dialog--position-right]=\\\"position === 'right'\\\">\\n    <header class=\\\"upload-dialog__header\\\">\\n        <button\\n            md-button\\n            color=\\\"secondary\\\"\\n            [disabled]=\\\"isConfirmation\\\"\\n            (click)=\\\"toggleMinimized()\\\">\\n            <md-icon\\n                md-list-icon\\n                title=\\\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\\\">\\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\\n            </md-icon>\\n        </button>\\n\\n        <span\\n            class=\\\"upload-dialog__title\\\"\\n            *ngIf=\\\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\\\">\\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\\n                | translate: {\\n                    completed: totalCompleted,\\n                    total: filesUploadingList.length\\n                }\\n            }}\\n        </span>\\n\\n        <span\\n            class=\\\"upload-dialog__title\\\"\\n            *ngIf=\\\"uploadList.isUploadCompleted()\\\">\\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_COMPLETED'\\n                | translate: {\\n                    completed: totalCompleted,\\n                    total: filesUploadingList.length\\n                }\\n            }}\\n        </span>\\n\\n        <span\\n            class=\\\"upload-dialog__title\\\"\\n            *ngIf=\\\"uploadList.isUploadCancelled()\\\">\\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\\n        </span>\\n    </header>\\n\\n    <section\\n        class=\\\"upload-dialog__info\\\"\\n        *ngIf=\\\"totalErrors\\\">\\n        {{\\n            (totalErrors > 1\\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\\n                 | translate: { total: totalErrors }\\n        }}\\n    </section>\\n\\n    <section\\n        class=\\\"upload-dialog__content\\\"\\n        [class.upload-dialog--padding]=\\\"isConfirmation\\\">\\n        <adf-file-uploading-list\\n            [class.upload-dialog--hide]=\\\"isConfirmation\\\"\\n            #uploadList\\n            [files]=\\\"filesUploadingList\\\">\\n                <ng-template let-file=\\\"$implicit\\\">\\n                     <adf-file-uploading-list-row\\n                        [file]=\\\"file\\\"\\n                        (remove)=\\\"uploadList.removeFile(file)\\\"\\n                        (cancel)=\\\"uploadList.cancelFile(file)\\\">\\n                    </adf-file-uploading-list-row>\\n                </ng-template>\\n        </adf-file-uploading-list>\\n\\n        <div\\n            class=\\\"upload-dialog__confirmation\\\"\\n            [class.upload-dialog--hide]=\\\"!isConfirmation\\\">\\n                <p class=\\\"upload-dialog__confirmation--title\\\">\\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\\n                </p>\\n\\n                <p class=\\\"upload-dialog__confirmation--text\\\">\\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\\n                </p>\\n        </div>\\n    </section>\\n\\n    <footer\\n        class=\\\"upload-dialog__actions\\\"\\n        [class.upload-dialog--hide]=\\\"isConfirmation\\\">\\n        <button\\n            color=\\\"primary\\\"\\n            md-button\\n            *ngIf=\\\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\\\"\\n            (click)=\\\"toggleConfirmation()\\\">\\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}\\n        </button>\\n\\n        <button\\n            *ngIf=\\\"uploadList.isUploadCompleted() || uploadList.isUploadCancelled()\\\"\\n            md-button\\n            color=\\\"primary\\\"\\n            (click)=\\\"close($event)\\\">\\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}\\n        </button>\\n    </footer>\\n\\n    <footer\\n        class=\\\"upload-dialog__actions\\\"\\n        [class.upload-dialog--hide]=\\\"!isConfirmation\\\">\\n        <button\\n            color=\\\"secondary\\\"\\n            md-button\\n            (click)=\\\"cancelAllUploads()\\\">\\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}\\n        </button>\\n\\n        <button\\n            md-button\\n            color=\\\"primary\\\"\\n            (click)=\\\"toggleConfirmation()\\\">\\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}\\n        </button>\\n    </footer>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/file-uploading-dialog.component.html\n// module id = 13\n// module chunks = 0","module.exports = \"<div class=\\\"adf-file-uploading-row\\\">\\n    <md-icon\\n        md-list-icon\\n        class=\\\"adf-file-uploading-row__type\\\">\\n        insert_drive_file\\n    </md-icon>\\n\\n    <span\\n        class=\\\"adf-file-uploading-row__name\\\"\\n        title=\\\"{{ file.name }}\\\">\\n        {{ file.name }}\\n    </span>\\n\\n    <div\\n        *ngIf=\\\"file.status === FileUploadStatus.Progress || file.status === FileUploadStatus.Starting\\\"\\n        (click)=\\\"onCancel(file)\\\"\\n        class=\\\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\\\"\\n        title=\\\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\\\">\\n        <span class=\\\"adf-file-uploading-row__status\\\">\\n            {{ file.progress.loaded | adfFileSize }} / {{ file.progress.total | adfFileSize }}\\n        </span>\\n\\n        <md-icon\\n            md-list-icon\\n            class=\\\"adf-file-uploading-row__action adf-file-uploading-row__action--cancel\\\">\\n            clear\\n        </md-icon>\\n    </div>\\n\\n    <div\\n        *ngIf=\\\"file.status === FileUploadStatus.Complete\\\"\\n        (click)=\\\"onRemove(file)\\\"\\n        class=\\\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\\\"\\n        title=\\\"{{ 'ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE' | translate }}\\\">\\n        <md-icon\\n            md-list-icon\\n            class=\\\"adf-file-uploading-row__status adf-file-uploading-row__status--done\\\">\\n            check_circle\\n        </md-icon>\\n\\n        <md-icon\\n            md-list-icon\\n            class=\\\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\\\">\\n            remove_circle\\n        </md-icon>\\n    </div>\\n\\n    <div\\n        *ngIf=\\\"file.status === FileUploadStatus.Pending\\\"\\n        (click)=\\\"onCancel(file)\\\"\\n        class=\\\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\\\">\\n        <md-icon\\n            md-list-icon\\n            class=\\\"adf-file-uploading-row__status adf-file-uploading-row__status--pending\\\">\\n            schedule\\n        </md-icon>\\n\\n        <md-icon\\n            md-list-icon\\n            class=\\\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\\\">\\n            remove_circle\\n        </md-icon>\\n    </div>\\n\\n    <div\\n        *ngIf=\\\"file.status === FileUploadStatus.Error\\\"\\n        class=\\\"adf-file-uploading-row__block adf-file-uploading-row__status--error\\\"\\n        title=\\\"{{ file.response }}\\\">\\n        <md-icon md-list-icon>\\n            report_problem\\n        </md-icon>\\n    </div>\\n\\n    <div\\n        *ngIf=\\\"file.status === FileUploadStatus.Cancelled  ||\\n            file.status === FileUploadStatus.Aborted ||\\n            file.status === FileUploadStatus.Deleted\\\"\\n        class=\\\"adf-file-uploading-row__block adf-file-uploading-row__status--cancelled\\\">\\n        {{ 'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate }}\\n    </div>\\n<div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/file-uploading-list-row.component.html\n// module id = 14\n// module chunks = 0","module.exports = \"<div class=\\\"upload-list\\\">\\n    <ng-template\\n        ngFor\\n        [ngForOf]=\\\"files\\\"\\n        [ngForTemplate]=\\\"template\\\">\\n    </ng-template>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/file-uploading-list.component.html\n// module id = 15\n// module chunks = 0","module.exports = \"<form class=\\\"adf-upload-button-file-container\\\">\\n    <!--Files Upload-->\\n    <a *ngIf=\\\"!uploadFolders\\\"\\n        [disabled]=\\\"isButtonDisabled()\\\"\\n        md-raised-button color=\\\"primary\\\">\\n        <md-icon>file_upload</md-icon>\\n\\n        <!--Multiple Files Upload-->\\n        <span *ngIf=\\\"multipleFiles\\\">\\n            <label\\n                id=\\\"upload-multiple-file-label\\\"\\n                *ngIf=\\\"!staticTitle\\\"\\n                for=\\\"upload-multiple-files\\\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\\n            <label\\n                id=\\\"upload-multiple-file-label-static\\\"\\n                *ngIf=\\\"staticTitle\\\"\\n                for=\\\"upload-multiple-files\\\">{{ staticTitle }}</label>\\n            <input #uploadFiles\\n                id=\\\"upload-multiple-files\\\"\\n                data-automation-id=\\\"upload-multiple-files\\\"\\n                type=\\\"file\\\"\\n                name=\\\"uploadFiles\\\"\\n                multiple=\\\"multiple\\\"\\n                accept=\\\"{{acceptedFilesType}}\\\"\\n                [attr.disabled]=\\\"isButtonDisabled()\\\"\\n                [title]=\\\"tooltip\\\"\\n                (change)=\\\"onFilesAdded($event)\\\">\\n        </span>\\n\\n        <!--Single Files Upload-->\\n        <span *ngIf=\\\"!multipleFiles\\\">\\n            <label\\n                id=\\\"upload-single-file-label\\\"\\n                *ngIf=\\\"!staticTitle\\\"\\n                for=\\\"upload-single-file\\\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\\n            <label\\n                id=\\\"upload-single-file-label-static\\\"\\n                *ngIf=\\\"staticTitle\\\"\\n                for=\\\"upload-single-file\\\">{{ staticTitle }}</label>\\n            <input #uploadFiles\\n                id=\\\"upload-single-file\\\"\\n                data-automation-id=\\\"upload-single-file\\\"\\n                type=\\\"file\\\"\\n                name=\\\"uploadFiles\\\"\\n                accept=\\\"{{acceptedFilesType}}\\\"\\n                [attr.disabled]=\\\"isButtonDisabled()\\\"\\n                [title]=\\\"tooltip\\\"\\n                (change)=\\\"onFilesAdded($event)\\\">\\n        </span>\\n    </a>\\n\\n    <!--Folders Upload-->\\n    <a *ngIf=\\\"uploadFolders\\\"\\n        [disabled]=\\\"isButtonDisabled()\\\" md-raised-button color=\\\"primary\\\">\\n        <md-icon>file_upload</md-icon>\\n        <label\\n            id=\\\"uploadFolder-label\\\"\\n            *ngIf=\\\"!staticTitle\\\"\\n            for=\\\"uploadFolder\\\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\\n        <label\\n            id=\\\"uploadFolder-label-static\\\"\\n            *ngIf=\\\"staticTitle\\\"\\n            for=\\\"uploadFolder\\\">{{ staticTitle }}</label>\\n        <input #uploadFolders\\n            id=\\\"uploadFolder\\\"\\n            data-automation-id=\\\"uploadFolder\\\"\\n            type=\\\"file\\\"\\n            name=\\\"uploadFiles\\\"\\n            multiple=\\\"multiple\\\"\\n            accept=\\\"{{acceptedFilesType}}\\\"\\n            webkitdirectory directory\\n            [attr.disabled]=\\\"isButtonDisabled()\\\"\\n            [title]=\\\"tooltip\\\"\\n            (change)=\\\"onDirectoryAdded($event)\\\">\\n    </a>\\n</form>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/upload-button.component.html\n// module id = 16\n// module chunks = 0","module.exports = \"<div [file-draggable]=\\\"isDroppable()\\\" id=\\\"UploadBorder\\\" class=\\\"upload-border\\\"\\n     (onFilesDropped)=\\\"onFilesDropped($event)\\\"\\n     (onFilesEntityDropped)=\\\"onFilesEntityDropped($event)\\\"\\n     (onFolderEntityDropped)=\\\"onFolderEntityDropped($event)\\\"\\n     (upload-files)=\\\"onUploadFiles($event)\\\"\\n     dropzone=\\\"\\\" webkitdropzone=\\\"*\\\" #droparea>\\n    <ng-content></ng-content>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/upload-drag-area.component.html\n// module id = 17\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/file-uploading-dialog.component.scss\n// module id = 18\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/file-uploading-list-row.component.scss\n// module id = 19\n// module chunks = 0","module.exports = \":host {\\n  display: flex;\\n  flex-direction: column; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/file-uploading-list.component.scss\n// module id = 20\n// module chunks = 0","module.exports = \".adf-upload-button-file-container input {\\n  cursor: pointer;\\n  height: 100%;\\n  right: 0;\\n  opacity: 0;\\n  position: absolute;\\n  top: 0;\\n  width: 300px;\\n  z-index: 4; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/upload-button.component.scss\n// module id = 21\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/css-loader/index.js!./upload-drag-area.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/upload-drag-area.component.css\n// module id = 22\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/raw-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./file-uploading-dialog.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/file-uploading-dialog.component.scss\n// module id = 23\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/raw-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./file-uploading-list-row.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/file-uploading-list-row.component.scss\n// module id = 24\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/raw-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./file-uploading-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/file-uploading-list.component.scss\n// module id = 25\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/raw-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./upload-button.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/upload-button.component.scss\n// module id = 26\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 27\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\n\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\nimport { MaterialModule } from './src/material.module';\n\nimport { FileUploadingDialogComponent } from './src/components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './src/components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './src/components/file-uploading-list.component';\nimport { UploadButtonComponent } from './src/components/upload-button.component';\nimport { UploadDragAreaComponent } from './src/components/upload-drag-area.component';\nimport { FileDraggableDirective } from './src/directives/file-draggable.directive';\n\nexport * from './src/components/upload-button.component';\nexport * from './src/components/file-uploading-dialog.component';\nexport * from './src/components/upload-drag-area.component';\nexport * from './src/directives/file-draggable.directive';\nexport * from './src/components/file-uploading-list.component';\nexport * from './src/components/file-uploading-list-row.component';\nexport * from './src/models/permissions.model';\n\nexport const UPLOAD_DIRECTIVES: any[] = [\n    FileDraggableDirective,\n    UploadDragAreaComponent,\n    UploadButtonComponent,\n    FileUploadingDialogComponent,\n    FileUploadingListComponent,\n    FileUploadingListRowComponent\n];\n\n@NgModule({\n    imports: [\n        CoreModule,\n        MaterialModule\n    ],\n    declarations: [\n        ...UPLOAD_DIRECTIVES\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-alfresco-upload',\n                source: 'assets/ng2-alfresco-upload'\n            }\n        }\n    ],\n    exports: [\n        ...UPLOAD_DIRECTIVES\n    ]\n})\nexport class UploadModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./index.ts"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChEA;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAOA;AAUA;AACA;AACA;AACA;AACA;AAZA;AAMA;AAOA;AASA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAEA;AACA;AACA;AAIA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AArIA;AADA;;AACA;AAGA;AADA;;AACA;AARA;AALA;AACA;AACA;AACA;AACA;AAYA;AAXA;AA2IA;;AAAA;AA3IA;;;;;;;;;AC1BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AAOA;AAmBA;AACA;AACA;AAhBA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AALA;AALA;AACA;AACA;AACA;AACA;AAqBA;AApBA;AAmHA;;AAAA;AAnHA;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAOA;AALA;AAUA;AAGA;AAEA;AASA;AAPA;AACA;AACA;AAEA;AACA;AACA;AAhBA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AARA;AALA;AACA;AACA;AACA;AACA;AACA;AAmBA;;AAAA;AAnBA;;;;;;;;;ACzBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AAWA;AACA;AAWA;AAsDA;AAAA;AACA;AACA;AACA;AACA;AAtDA;AAIA;AAIA;AAGA;AAGA;AAGA;AAGA;AAGA;AAMA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AAEA;AAOA;AA3DA;AA6DA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA9MA;AADA;;AACA;AAIA;AADA;;AACA;AAIA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAhDA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuDA;AAtDA;AAmNA;;AAAA;AAnNA;;;;;;;;;AC1CA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAoBA;AAuCA;AAAA;AACA;AACA;AAxBA;AAIA;AAIA;AAGA;AAGA;AAMA;AAKA;AA1CA;AAIA;AAMA;AACA;AACA;AACA;AATA;AACA;AACA;AACA;;;AAAA;AA0CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAQA;AACA;AACA;AAGA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjMA;AADA;;;AAIA;AAUA;AADA;;AACA;AAIA;AADA;;AACA;AAIA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AArCA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwCA;AAvCA;AAsMA;;AAAA;AAtMA;;;;;;;;;ACtCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAKA;AAmBA;AAAA;AAdA;AAGA;AAGA;AAGA;AAEA;AAIA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAjHA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAdA;AAHA;AACA;AACA;AAoBA;AAnBA;AAuHA;;AAAA;AAvHA;;;;;;;ACvBA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;;;;;;;;;ACjBA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjDA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AAAA;AAAA;AAtBA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;;;;;","sourceRoot":""}