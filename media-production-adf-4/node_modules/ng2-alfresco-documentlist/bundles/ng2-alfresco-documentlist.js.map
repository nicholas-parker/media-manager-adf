{"version":3,"file":"./bundles/ng2-alfresco-documentlist.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8eda09416651ebc039f0","webpack:///external \"@angular/core\"","webpack:///external \"ng2-alfresco-core\"","webpack:///./src/components/document-list.component.ts","webpack:///./src/services/document-list.service.ts","webpack:///./src/services/node-actions.service.ts","webpack:///external \"rxjs/Rx\"","webpack:///./src/components/breadcrumb/breadcrumb.component.ts","webpack:///./src/components/content-action/content-action-list.component.ts","webpack:///./src/components/content-column/content-column-list.component.ts","webpack:///./src/components/content-node-selector/content-node-selector.component.ts","webpack:///./src/services/document-actions.service.ts","webpack:///./src/services/folder-actions.service.ts","webpack:///external \"@angular/material\"","webpack:///./src/data/share-datatable-adapter.ts","webpack:///./src/models/content-action.model.ts","webpack:///./src/models/permissions.model.ts","webpack:///external \"ng2-alfresco-datatable\"","webpack:///./src/components/content-action/content-action.component.ts","webpack:///./src/components/content-column/content-column.component.ts","webpack:///./src/components/empty-folder/empty-folder-content.directive.ts","webpack:///./src/components/site-dropdown/sites-dropdown.component.ts","webpack:///./src/models/permissions-style.model.ts","webpack:///./src/components/content-node-selector/content-node-selector.service.ts","webpack:///./src/components/node.event.ts","webpack:///external \"alfresco-js-api\"","webpack:///./src/components/breadcrumb/dropdown-breadcrumb.component.ts","webpack:///./src/material.module.ts","webpack:///./src/models/document-library.model.ts","webpack:///./src/assets/images/empty_doc_lib.svg","webpack:///./src/models/preset.model.ts","webpack:///./src/components/breadcrumb/breadcrumb.component.html","webpack:///./src/components/breadcrumb/dropdown-breadcrumb.component.html","webpack:///./src/components/content-node-selector/content-node-selector.component.html","webpack:///./src/components/document-list.component.html","webpack:///./src/components/site-dropdown/sites-dropdown.component.html","webpack:///./src/components/breadcrumb/breadcrumb.component.scss","webpack:///./src/components/breadcrumb/dropdown-breadcrumb.component.scss","webpack:///./src/components/content-node-selector/content-node-selector.component.scss","webpack:///./src/components/document-list.component.scss","webpack:///./src/components/site-dropdown/sites-dropdown.component.scss","webpack:///./src/components/breadcrumb/breadcrumb.component.scss?5c68","webpack:///./src/components/breadcrumb/dropdown-breadcrumb.component.scss?e2d0","webpack:///./src/components/content-node-selector/content-node-selector.component.scss?cb78","webpack:///./src/components/document-list.component.scss?c7ba","webpack:///./src/components/site-dropdown/sites-dropdown.component.scss?f1aa","webpack:///external \"@angular/common\"","webpack:///external \"rxjs/Observable\"","webpack:///./index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"ng2-alfresco-datatable\"), require(\"alfresco-js-api\"), require(\"@angular/common\"), require(\"rxjs/Observable\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"ng2-alfresco-core\", \"rxjs/Rx\", \"@angular/material\", \"ng2-alfresco-datatable\", \"alfresco-js-api\", \"@angular/common\", \"rxjs/Observable\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-alfresco-documentlist\"] = factory(require(\"@angular/core\"), require(\"ng2-alfresco-core\"), require(\"rxjs/Rx\"), require(\"@angular/material\"), require(\"ng2-alfresco-datatable\"), require(\"alfresco-js-api\"), require(\"@angular/common\"), require(\"rxjs/Observable\"));\n\telse\n\t\troot[\"ng2-alfresco-documentlist\"] = factory(root[\"@angular/core\"], root[\"ng2-alfresco-core\"], root[\"rxjs/Rx\"], root[\"@angular/material\"], root[\"ng2-alfresco-datatable\"], root[\"alfresco-js-api\"], root[\"@angular/common\"], root[\"rxjs/Observable\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_45__, __WEBPACK_EXTERNAL_MODULE_46__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8eda09416651ebc039f0","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 1\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnInit, Output, SimpleChanges, TemplateRef, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging, Pagination, PersonEntry } from 'alfresco-js-api';\nimport { AlfrescoApiService, AppConfigService, DataColumnListComponent, UserPreferencesService } from 'ng2-alfresco-core';\nimport { DataCellEvent, DataColumn, DataRowActionEvent, DataSorting, DataTableComponent, ObjectDataColumn } from 'ng2-alfresco-datatable';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ImageResolver, RowFilter, ShareDataRow, ShareDataTableAdapter } from './../data/share-datatable-adapter';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\n\ndeclare var require: any;\n\nexport enum PaginationStrategy {\n    Finite,\n    Infinite\n}\n\n@Component({\n    selector: 'adf-document-list, alfresco-document-list',\n    styles: [require('./document-list.component.scss')],\n    template: require('./document-list.component.html'),\n    encapsulation: ViewEncapsulation.None\n})\nexport class DocumentListComponent implements OnInit, OnChanges, AfterContentInit {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n    static DEFAULT_PAGE_SIZE: number = 20;\n\n    @ContentChild(DataColumnListComponent) columnList: DataColumnListComponent;\n\n    @Input()\n    permissionsStyle: PermissionStyleModel[] = [];\n\n    @Input()\n    locationFormat: string = '/';\n\n    @Input()\n    navigate: boolean = true;\n\n    @Input()\n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    @Input()\n    thumbnails: boolean = false;\n\n    @Input()\n    selectionMode: string = 'single'; // null|single|multiple\n\n    @Input()\n    multiselect: boolean = false;\n\n    @Input()\n    enablePagination: boolean = true;\n\n    @Input()\n    contentActions: boolean = false;\n\n    @Input()\n    contentActionsPosition: string = 'right'; // left|right\n\n    @Input()\n    contextMenuActions: boolean = false;\n\n    @Input()\n    pageSize: number = DocumentListComponent.DEFAULT_PAGE_SIZE;\n\n    @Input()\n    emptyFolderImageUrl: string = require('../assets/images/empty_doc_lib.svg');\n\n    @Input()\n    allowDropFiles: boolean = false;\n\n    @Input()\n    sorting: string[];\n\n    @Input()\n    rowStyle: string;\n\n    @Input()\n    rowStyleClass: string;\n\n    @Input()\n    loading: boolean = false;\n\n    @Input()\n    paginationStrategy: PaginationStrategy = PaginationStrategy.Finite;\n\n    @Input()\n    supportedPageSizes: number[];\n\n    infiniteLoading: boolean = false;\n\n    selection = new Array<MinimalNodeEntity>();\n    skipCount: number = 0;\n    pagination: Pagination;\n\n    @Input()\n    rowFilter: RowFilter|null = null;\n\n    @Input()\n    imageResolver: ImageResolver|null = null;\n\n    // The identifier of a node. You can also use one of these well-known aliases: -my- | -shared- | -root-\n    @Input()\n    currentFolderId: string = null;\n\n    @Input()\n    folderNode: MinimalNodeEntryEntity = null;\n\n    @Input()\n    node: NodePaging = null;\n\n    @Output()\n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    @Output()\n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    @Output()\n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    @Output()\n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    @Output()\n    ready: EventEmitter<any> = new EventEmitter();\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild(DataTableComponent)\n    dataTable: DataTableComponent;\n\n    errorMessage;\n    actions: ContentActionModel[] = [];\n    emptyFolderTemplate: TemplateRef<any>;\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n\n    private layoutPresets = {};\n    private currentNodeAllowableOperations: string[] = [];\n    private CREATE_PERMISSION = 'create';\n\n    constructor(private documentListService: DocumentListService,\n                private ngZone: NgZone,\n                private elementRef: ElementRef,\n                private apiService: AlfrescoApiService,\n                private appConfig: AppConfigService,\n                private preferences: UserPreferencesService) {\n        this.supportedPageSizes = appConfig.get('document-list.supportedPageSizes', [5, 10, 15, 20]);\n    }\n\n    getContextActions(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            let actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map(a => {\n                    return {\n                        model: a,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n\n    contextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n\n    get hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n\n    ngOnInit() {\n        this.pageSize = this.preferences.paginationSize;\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.documentListService, null, this.getDefaultSorting());\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this.rowFilter) {\n            this.data.setFilter(this.rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.contextActionHandler.subscribe(val => this.contextActionCallback(val));\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n\n    ngAfterContentInit() {\n        let schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map(c => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.documentListService, schema, this.getDefaultSorting());\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        let columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this.currentFolderId);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.folderNode && changes.folderNode.currentValue) {\n            this.loadFolder();\n        } else if (changes.currentFolderId && changes.currentFolderId.currentValue) {\n            if (changes.currentFolderId.previousValue !== changes.currentFolderId.currentValue) {\n                this.resetPagination();\n                this.folderNode = null;\n            }\n            if (!this.hasCustomLayout) {\n                this.setupDefaultColumns(changes.currentFolderId.currentValue);\n            }\n            this.loadFolderByNodeId(changes.currentFolderId.currentValue);\n        } else if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                this.resetSelection();\n                this.data.loadPage(changes.node.currentValue);\n            } else if (changes.rowFilter) {\n                this.data.setFilter(changes.rowFilter.currentValue);\n                if (this.currentFolderId) {\n                    this.loadFolderNodesByFolderNodeId(this.currentFolderId, this.pageSize, this.skipCount);\n                }\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n\n    reload(merge: boolean = false) {\n        this.ngZone.run(() => {\n            this.resetSelection();\n\n            if (this.folderNode) {\n                this.loadFolder(merge);\n            } else if (this.currentFolderId) {\n                this.loadFolderByNodeId(this.currentFolderId);\n            } else if (this.node) {\n                this.data.loadPage(this.node);\n                this.ready.emit();\n            }\n        });\n    }\n\n    isEmptyTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.emptyFolderTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    isEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n\n    isPaginationEnabled() {\n        return this.enablePagination && !this.isEmpty();\n    }\n\n    isPaginationNeeded() {\n        return this.paginationStrategy === PaginationStrategy.Finite;\n    }\n\n    getNodeActions(node: MinimalNodeEntity | any): ContentActionModel[] {\n        let target = null;\n\n        if (node && node.entry) {\n            if (node.entry.isFile) {\n                target = 'document';\n            }\n\n            if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                let ltarget = target.toLowerCase();\n                let actionsByTarget = this.actions.filter(entry => {\n                    return entry.target.toLowerCase() === ltarget;\n                }).map(action => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.checkPermission(node, action);\n                });\n\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n\n    checkPermission(node: any, action: ContentActionModel): ContentActionModel {\n        if (action.permission) {\n            if (this.hasPermissions(node)) {\n                let permissions = node.entry.allowableOperations;\n                let findPermission = permissions.find(permission => permission === action.permission);\n                if (!findPermission && action.disableWithNoPermission === true) {\n                    action.disabled = true;\n                }\n            }\n        }\n        return action;\n    }\n\n    private hasPermissions(node: any): boolean {\n        return node.entry.allowableOperations ? true : false;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n\n    performNavigation(node: MinimalNodeEntity): boolean {\n        if (this.canNavigateFolder(node)) {\n            this.currentFolderId = node.entry.id;\n            this.folderNode = node.entry;\n            this.skipCount = 0;\n            this.currentNodeAllowableOperations = node.entry['allowableOperations'] ? node.entry['allowableOperations'] : [];\n            this.loadFolder();\n            this.folderChange.emit(new NodeEntryEvent(node.entry));\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Invoked when executing content action for a document or folder.\n     * @param node Node to be the context of the execution.\n     * @param action Action to be executed against the context.\n     */\n    executeContentAction(node: MinimalNodeEntity, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = Observable.of(true);\n            }\n\n            if (typeof action.execute === 'function') {\n                handlerSub.subscribe(() => { action.execute(node); });\n            }\n        }\n    }\n\n    loadFolder(merge: boolean = false) {\n        if (merge) {\n            this.infiniteLoading = true;\n        } else {\n            this.loading = true;\n        }\n\n        let nodeId = this.folderNode ? this.folderNode.id : this.currentFolderId;\n        if (nodeId) {\n            this.loadFolderNodesByFolderNodeId(nodeId, this.pageSize, this.skipCount, merge).catch(err => this.error.emit(err));\n        }\n    }\n\n    // gets folder node and its content\n    loadFolderByNodeId(nodeId: string) {\n        this.loading = true;\n        this.resetSelection();\n\n        if (nodeId === '-trashcan-') {\n            this.loadTrashcan();\n        } else if (nodeId === '-sharedlinks-') {\n            this.loadSharedLinks();\n        } else if (nodeId === '-sites-') {\n            this.loadSites();\n        } else if (nodeId === '-favorites-') {\n            this.loadFavorites();\n        } else if (nodeId === '-recent-') {\n            this.loadRecent();\n        } else {\n            this.documentListService\n                .getFolderNode(nodeId).then(node => {\n                    this.folderNode = node;\n                    this.currentFolderId = node.id;\n                    this.skipCount = 0;\n                    this.currentNodeAllowableOperations = node['allowableOperations'] ? node['allowableOperations'] : [];\n                    this.loadFolderNodesByFolderNodeId(node.id, this.pageSize, this.skipCount).catch(err => this.error.emit(err));\n                })\n                .catch(err => this.error.emit(err));\n        }\n    }\n\n    loadFolderNodesByFolderNodeId(id: string, maxItems: number, skipCount: number, merge: boolean = false): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.resetSelection();\n            this.documentListService\n                .getFolder(null, {\n                    maxItems: maxItems,\n                    skipCount: skipCount,\n                    rootFolderId: id\n                })\n                .subscribe(\n                    val => {\n                        if (this.isCurrentPageEmpty(val, skipCount)) {\n                            this.updateSkipCount(skipCount - maxItems);\n                            this.loadFolderNodesByFolderNodeId(id, maxItems, skipCount - maxItems).then(\n                                () => resolve(true),\n                                error => reject(error)\n                            );\n                        } else {\n                            this.data.loadPage(<NodePaging> val, merge);\n                            this.pagination = val.list.pagination;\n                            this.loading = false;\n                            this.infiniteLoading = false;\n                            this.ready.emit();\n                            resolve(true);\n                        }\n                    },\n                    error => {\n                        reject(error);\n                    });\n        });\n\n    }\n\n    resetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n    }\n\n    resetPagination() {\n        this.skipCount = 0;\n    }\n\n    private loadTrashcan(): void {\n        const options = {\n            include: [ 'path', 'properties' ],\n            maxItems: this.pageSize,\n            skipCount: this.skipCount\n        };\n        this.apiService.nodesApi.getDeletedNodes(options).then((page: NodePaging) => {\n            this.onPageLoaded(page);\n        });\n    }\n\n    private loadSharedLinks(): void {\n        const options = {\n            include: [ 'properties', 'allowableOperations', 'path' ],\n            maxItems: this.pageSize,\n            skipCount: this.skipCount\n        };\n        this.apiService.sharedLinksApi.findSharedLinks(options).then((page: NodePaging) => {\n           this.onPageLoaded(page);\n        });\n    }\n\n    private loadSites(): void {\n        const options = {\n            include: [ 'properties' ],\n            maxItems: this.pageSize,\n            skipCount: this.skipCount\n        };\n\n        this.apiService.sitesApi.getSites(options).then((page: NodePaging) => {\n            this.onPageLoaded(page);\n        });\n    }\n\n    private loadFavorites(): void {\n        const options = {\n            maxItems: this.pageSize,\n            skipCount: this.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: [ 'properties', 'allowableOperations', 'path' ]\n        };\n\n        this.apiService.favoritesApi.getFavorites('-me-', options).then((result: NodePaging) => {\n            let page: NodePaging = {\n                list: {\n                    entries: result.list.entries\n                        .map(({ entry: { target }}: any) => ({\n                            entry: target.file || target.folder\n                        }))\n                        .map(({ entry }: any) => {\n                            entry.properties = {\n                                'cm:title': entry.title,\n                                'cm:description': entry.description\n                            };\n                            return { entry };\n                        }),\n                    pagination: result.list.pagination\n                }\n            };\n            this.onPageLoaded(page);\n        });\n    }\n\n    private loadRecent(): void {\n        this.apiService.peopleApi.getPerson('-me-').then((person: PersonEntry) => {\n            const username = person.entry.id;\n            const query = {\n                query: {\n                    query: '*',\n                    language: 'afts'\n                },\n                filterQueries: [\n                    { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                    { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                    { query: `TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"` }\n                ],\n                include: [ 'path', 'properties', 'allowableOperations' ],\n                sort: [{\n                    type: 'FIELD',\n                    field: 'cm:modified',\n                    ascending: false\n                }],\n                paging: {\n                    maxItems: this.pageSize,\n                    skipCount: this.skipCount\n                }\n            };\n\n            this.apiService.searchApi.search(query).then(page => this.onPageLoaded(page));\n        });\n    }\n\n    private onPageLoaded(page: NodePaging) {\n        if (page) {\n            this.data.loadPage(page);\n            this.pagination = page.list.pagination;\n            this.loading = false;\n            this.ready.emit();\n        }\n    }\n\n    private isCurrentPageEmpty(node, skipCount): boolean {\n        return !this.hasNodeEntries(node) && this.hasPages(skipCount);\n    }\n\n    private hasPages(skipCount): boolean {\n        return skipCount > 0 && this.isPaginationEnabled();\n    }\n\n    private hasNodeEntries(node): boolean {\n        return node && node.list && node.list.entries && node.list.entries.length > 0;\n    }\n\n    /**\n     * Creates a set of predefined columns.\n     */\n    setupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n\n    onPreviewFile(node: MinimalNodeEntity) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n\n    onNodeClick(node: MinimalNodeEntity) {\n        const domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(node);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n\n    onNodeDblClick(node: MinimalNodeEntity) {\n        const domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(node);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n\n    onNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n\n    onExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            let action = (<ContentActionModel> args.action);\n            this.executeContentAction(node, action);\n        }\n    }\n\n    onChangePageSize(event: Pagination): void {\n        this.preferences.paginationSize = event.maxItems;\n        this.pageSize = event.maxItems;\n        this.skipCount = 0;\n        this.reload();\n    }\n\n    onChangePageNumber(page: Pagination): void {\n        this.pageSize = page.maxItems;\n        this.skipCount = page.skipCount;\n        this.reload();\n    }\n\n    onNextPage(event: Pagination): void {\n        this.skipCount = event.skipCount;\n        this.reload();\n    }\n\n    loadNextBatch(event: Pagination) {\n        this.skipCount = event.skipCount;\n        this.reload(true);\n    }\n\n    onPrevPage(event: Pagination): void {\n        this.skipCount = event.skipCount;\n        this.reload();\n    }\n\n    private enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n\n    private getDefaultSorting(): DataSorting {\n        let defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n\n    canNavigateFolder(node: MinimalNodeEntity): boolean {\n        if (this.isCustomSource(this.currentFolderId)) {\n            return false;\n        }\n\n        if (node && node.entry && node.entry.isFolder) {\n            return true;\n        }\n\n        return false;\n    }\n\n    isCustomSource(folderId: string): boolean {\n        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    updateSkipCount(newSkipCount) {\n        this.skipCount = newSkipCount;\n    }\n\n    hasCurrentNodePermission(permission: string): boolean {\n        let hasPermission: boolean = false;\n        if (this.currentNodeAllowableOperations.length > 0) {\n            let permFound = this.currentNodeAllowableOperations.find(element => element === permission);\n            hasPermission = permFound ? true : false;\n        }\n        return hasPermission;\n    }\n\n    hasCreatePermission() {\n        return this.hasCurrentNodePermission(this.CREATE_PERMISSION);\n    }\n\n    private loadLayoutPresets(): void {\n        const externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n\n    }\n\n    private getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map(col => new ObjectDataColumn(col));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/document-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';\nimport { AlfrescoApiService, AlfrescoAuthenticationService, AlfrescoContentService, LogService, PermissionsEnum, ThumbnailService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class DocumentListService {\n\n    static ROOT_ID = '-root-';\n\n    constructor(authService: AlfrescoAuthenticationService,\n                private contentService: AlfrescoContentService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    private getNodesPromise(folder: string, opts?: any): Promise<NodePaging> {\n\n        let rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        let params: any = {\n            includeSource: true,\n            include: ['path', 'properties', 'allowableOperations']\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n        }\n\n        return this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params);\n    }\n\n    deleteNode(nodeId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n\n    /**\n     * Copy a node to destination node\n     *\n     * @param nodeId The id of the node to be copied\n     * @param targetParentId The id of the folder-node where the node have to be copied to\n     */\n    copyNode(nodeId: string, targetParentId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId }))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Move a node to destination node\n     *\n     * @param nodeId The id of the node to be moved\n     * @param targetParentId The id of the folder-node where the node have to be moved to\n     */\n    moveNode(nodeId: string, targetParentId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId }))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Create a new folder in the path.\n     * @param name Folder name\n     * @param parentId Parent folder ID\n     * @returns {any}\n     */\n    createFolder(name: string, parentId: string): Observable<MinimalNodeEntity> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.createFolder(name, '/', parentId))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Gets the folder node with the specified relative name path below the root node.\n     * @param folder Path to folder.\n     * @param opts Options.\n     * @returns {Observable<NodePaging>} Folder entity.\n     */\n    getFolder(folder: string, opts?: any) {\n        return Observable.fromPromise(this.getNodesPromise(folder, opts))\n            .map(res => <NodePaging> res)\n            .catch(err => this.handleError(err));\n    }\n\n    getFolderNode(nodeId: string): Promise<MinimalNodeEntryEntity> {\n        let opts: any = {\n            includeSource: true,\n            include: ['path', 'properties', 'allowableOperations']\n        };\n\n        let nodes: any = this.apiService.getInstance().nodes;\n        return nodes.getNodeInfo(nodeId, opts);\n    }\n\n    /**\n     * Get thumbnail URL for the given document node.\n     * @param node Node to get URL for.\n     * @returns {string} URL address.\n     */\n    getDocumentThumbnailUrl(node: MinimalNodeEntity) {\n        return this.thumbnailService.getDocumentThumbnailUrl(node);\n    }\n\n    getMimeTypeIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    getDefaultMimeTypeIcon(): string {\n        return this.thumbnailService.getDefaultMimeTypeIcon();\n    }\n\n    hasPermission(node: any, permission: PermissionsEnum|string): boolean {\n        return this.contentService.hasPermission(node, permission);\n    }\n\n    private handleError(error: Response) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/document-list.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { MdDialog } from '@angular/material';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { AlfrescoContentService } from 'ng2-alfresco-core';\nimport { DataColumn } from 'ng2-alfresco-datatable';\nimport { Subject } from 'rxjs/Rx';\nimport { ContentNodeSelectorComponent, ContentNodeSelectorComponentData } from '../components/content-node-selector/content-node-selector.component';\nimport { ShareDataRow } from '../data/share-datatable-adapter';\nimport { DocumentListService } from './document-list.service';\n\n@Injectable()\nexport class NodeActionsService {\n\n    constructor(private dialog: MdDialog,\n                private documentListService?: DocumentListService,\n                private contentService?: AlfrescoContentService) {}\n\n    /**\n     * Copy content node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Copy folder node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * Move content node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Move folder node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * General method for performing the given operation (copy|move)\n     *\n     * @param action the action to perform (copy|move)\n     * @param type type of the content (content|folder)\n     * @param contentEntry the contentEntry which has to have the action performed on\n     * @param permission permission which is needed to apply the action\n     */\n    private doFileOperation(action: string, type: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasPermission(contentEntry, permission)) {\n            const data: ContentNodeSelectorComponentData = {\n                title: `${action} ${contentEntry.name} to ...`,\n                currentFolderId: contentEntry.parentId,\n                rowFilter: this.rowFilter.bind(this, contentEntry.id),\n                imageResolver: this.imageResolver.bind(this),\n                select: new EventEmitter<MinimalNodeEntryEntity[]>()\n            };\n\n            this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: 'adf-content-node-selector-dialog', width: '630px' });\n\n            data.select.subscribe((selections: MinimalNodeEntryEntity[]) => {\n                const selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                        observable.next.bind(observable, `OPERATION.SUCCES.${type.toUpperCase()}.${action.toUpperCase()}`),\n                        observable.error.bind(observable)\n                    );\n                this.dialog.closeAll();\n            });\n\n            return observable;\n        } else {\n            observable.error(new Error(JSON.stringify({ error: { statusCode: 403 } })));\n            return observable;\n        }\n    }\n\n    private rowFilter(currentNodeId, row: ShareDataRow): boolean {\n        const node: MinimalNodeEntryEntity = row.node.entry;\n\n        if (node.id === currentNodeId || node.isFile) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private imageResolver(row: ShareDataRow, col: DataColumn): string|null {\n        const entry: MinimalNodeEntryEntity = row.node.entry;\n        if (!this.contentService.hasPermission(entry, 'update')) {\n            return this.documentListService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/node-actions.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Rx\"\n// module id = 5\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity, PathElementEntity } from 'alfresco-js-api';\nimport { DocumentListComponent } from '../document-list.component';\n\n@Component({\n    selector: 'adf-breadcrumb, alfresco-document-list-breadcrumb',\n    template: require('./breadcrumb.component.html'),\n    styles: [require('./breadcrumb.component.scss')],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n})\nexport class BreadcrumbComponent implements OnChanges {\n\n    @Input()\n    folderNode: MinimalNodeEntryEntity = null;\n\n    @Input()\n    root: string = null;\n\n    @Input()\n    rootId: string = null;\n\n    @Input()\n    target: DocumentListComponent;\n\n    route: PathElementEntity[] = [];\n\n    get hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    @Output()\n    navigate: EventEmitter<PathElementEntity> = new EventEmitter<PathElementEntity>();\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.folderNode) {\n            const node: MinimalNodeEntryEntity = changes.folderNode.currentValue;\n            this.route = this.parseRoute(node);\n        }\n    }\n\n    parseRoute(node: MinimalNodeEntryEntity): PathElementEntity[] {\n        if (node && node.path) {\n            const route = <PathElementEntity[]> (node.path.elements || []).slice();\n\n            route.push(<PathElementEntity> {\n                id: node.id,\n                name: node.name\n            });\n\n            const rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n\n    private getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let result: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            result = route.findIndex(el => el.id === nodeId);\n        }\n\n        return result;\n    }\n\n    onRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.loadFolderByNodeId(route.id);\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/breadcrumb/breadcrumb.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-actions',\n    template: ''\n})\nexport class ContentActionListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    /**\n     * Registers action handler within the parent document list component.\n     * @param action Action model to register.\n     */\n    registerAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/content-action/content-action-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\nimport { DataColumn } from 'ng2-alfresco-datatable';\n\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-columns',\n    template: ''\n})\nexport class ContentColumnListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n        console.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n\n    /**\n     * Registers column model within the parent document list component.\n     * @param column Column definition model to register.\n     */\n    registerColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            let columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/content-column/content-column-list.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Inject, Input, OnInit, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MD_DIALOG_DATA, MdDialogRef } from '@angular/material';\nimport { MinimalNodeEntryEntity, NodePaging, Pagination } from 'alfresco-js-api';\nimport { AlfrescoContentService, HighlightDirective, SiteModel } from 'ng2-alfresco-core';\nimport { ImageResolver, RowFilter } from '../../data/share-datatable-adapter';\nimport { DocumentListComponent, PaginationStrategy } from '../document-list.component';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\n\nexport interface ContentNodeSelectorComponentData {\n    title: string;\n    currentFolderId?: string;\n    rowFilter?: RowFilter;\n    imageResolver?: ImageResolver;\n    select: EventEmitter<MinimalNodeEntryEntity[]>;\n}\n\n@Component({\n    selector: 'adf-content-node-selector',\n    styles: [require('./content-node-selector.component.scss')],\n    template: require('./content-node-selector.component.html'),\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentNodeSelectorComponent implements OnInit {\n\n    nodes: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    chosenNode: MinimalNodeEntryEntity | null = null;\n    folderIdToShow: string | null = null;\n    paginationStrategy: PaginationStrategy;\n    pagination: Pagination;\n    skipCount: number = 0;\n\n    @Input()\n    title: string;\n\n    @Input()\n    currentFolderId: string | null = null;\n\n    @Input()\n    rowFilter: RowFilter = null;\n\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    @Input()\n    pageSize: number = 10;\n\n    @Output()\n    select: EventEmitter<MinimalNodeEntryEntity[]> = new EventEmitter<MinimalNodeEntryEntity[]>();\n\n    @ViewChild(DocumentListComponent)\n    documentList: DocumentListComponent;\n\n    @ViewChild(HighlightDirective)\n    highlighter: HighlightDirective;\n\n    constructor(private contentNodeSelectorService: ContentNodeSelectorService,\n                private contentService: AlfrescoContentService,\n                @Optional() @Inject(MD_DIALOG_DATA) data?: ContentNodeSelectorComponentData,\n                @Optional() private containingDialog?: MdDialogRef<ContentNodeSelectorComponent>) {\n        if (data) {\n            this.title = data.title;\n            this.select = data.select;\n            this.currentFolderId = data.currentFolderId;\n            this.rowFilter = data.rowFilter;\n            this.imageResolver = data.imageResolver;\n        }\n\n        if (this.containingDialog) {\n            this.inDialog = true;\n        }\n    }\n\n    ngOnInit() {\n        this.folderIdToShow = this.currentFolderId;\n        this.paginationStrategy = PaginationStrategy.Infinite;\n    }\n\n    /**\n     * Updates the site attribute and starts a new search\n     *\n     * @param chosenSite Sitemodel to search within\n     */\n    siteChanged(chosenSite: SiteModel): void {\n        this.siteId = chosenSite.guid;\n        this.updateResults();\n    }\n\n    /**\n     * Updates the searchTerm attribute and starts a new search\n     *\n     * @param searchTerm string value to search against\n     */\n    search(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n\n    /**\n     * Returns whether breadcrumb has to be shown or not\n     */\n    needBreadcrumbs() {\n        const whenInFolderNavigation = !this.showingSearchResults,\n            whenInSelectingSearchResult = this.showingSearchResults && this.chosenNode;\n\n        return whenInFolderNavigation || whenInSelectingSearchResult;\n    }\n\n    /**\n     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n     */\n    get breadcrumbFolderNode(): MinimalNodeEntryEntity|null {\n        if (this.showingSearchResults && this.chosenNode) {\n            return this.chosenNode;\n        } else {\n            return this.documentList.folderNode;\n        }\n    }\n\n    /**\n     * Clear the search input\n     */\n    clear(): void {\n        this.searchTerm = '';\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n        this.folderIdToShow = this.currentFolderId;\n    }\n\n    /**\n     * Update the result list depending on the criterias\n     */\n    private updateResults(): void {\n        if (this.searchTerm.length === 0) {\n            this.folderIdToShow = this.siteId || this.currentFolderId;\n        } else {\n            this.startNewSearch();\n        }\n    }\n\n    /**\n     * Load the first page of a new search result\n     */\n    private startNewSearch(): void {\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    getNextPageOfSearch(event: Pagination): void {\n        this.skipCount = event.skipCount;\n        this.querySearch();\n    }\n\n    /**\n     * Perform the call to searchService with the proper parameters\n     */\n    private querySearch(): void {\n        if (this.isSearchTermLongEnough()) {\n            this.loadingSearchResults = true;\n\n            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize)\n                .subscribe(this.showSearchResults.bind(this));\n        }\n    }\n\n    /**\n     * Show the results of the search\n     *\n     * @param results Search results\n     */\n    private showSearchResults(results: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        // Documentlist hack, since data displaying for preloaded nodes is a little bit messy there\n        if (!this.nodes) {\n            this.nodes = results;\n        } else {\n            this.documentList.data.loadPage(results, true);\n        }\n\n        this.pagination = results.list.pagination;\n        this.highlight();\n    }\n\n    /**\n     * Predicate method to decide whether searchTerm fulfills the necessary criteria\n     */\n    isSearchTermLongEnough(): boolean {\n        return this.searchTerm.length > 3;\n    }\n\n    /**\n     * Hightlight the actual searchterm in the next frame\n     */\n    highlight(): void {\n        setTimeout(() => {\n            this.highlighter.highlight(this.searchTerm);\n        }, 0);\n    }\n\n    /**\n     * Invoked when user selects a node\n     *\n     * @param event CustomEvent for node-select\n     */\n    onNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n\n    /**\n     * Sets showingSearchResults state to be able to differentiate between search results or folder results\n     */\n    onFolderChange(): void {\n        this.showingSearchResults = false;\n    }\n\n    /**\n     * Attempts to set the currently loaded node\n     */\n    onFolderLoaded(): void {\n        this.attemptNodeSelection(this.documentList.folderNode);\n    }\n\n    /**\n     * Selects node as choosen if it has the right permission, clears the selection otherwise\n     *\n     * @param entry\n     */\n    private attemptNodeSelection(entry: MinimalNodeEntryEntity): void {\n        if (this.contentService.hasPermission(entry, 'update')) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n\n    /**\n     * Clears the chosen node\n     */\n    resetChosenNode(): void {\n        this.chosenNode = null;\n    }\n\n    /**\n     * Emit event with the chosen node\n     */\n    choose(): void {\n        this.select.next([this.chosenNode]);\n    }\n\n    /**\n     * Close the dialog\n     */\n    close(): void {\n        this.containingDialog.close();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/content-node-selector/content-node-selector.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { AlfrescoContentService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Rx';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\n\n@Injectable()\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService?: DocumentListService,\n                private contentService?: AlfrescoContentService) {\n        this.setupActionHandlers();\n    }\n\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    canExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFile === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['download'] = this.download.bind(this);\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n    }\n\n    private download(obj: any): Observable<boolean> {\n        if (this.canExecuteAction(obj) && this.contentService) {\n            let link = document.createElement('a');\n            document.body.appendChild(link);\n            link.setAttribute('download', 'download');\n            link.href = this.contentService.getContentUrl(obj);\n            link.click();\n            document.body.removeChild(link);\n            return Observable.of(true);\n        }\n        return Observable.of(false);\n    }\n\n    private copyNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyContent(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveContent(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(obj: any, target?: any, permission?: string): Observable<any> {\n        let handlerObservable;\n\n        if (this.canExecuteAction(obj)) {\n            if (this.contentService.hasPermission(obj.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(obj.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n                    this.success.next(obj.entry.id);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'content', action: 'delete', permission: permission}));\n                return Observable.throw(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/document-actions.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { AlfrescoContentService } from 'ng2-alfresco-core';\nimport { Observable, Subject } from 'rxjs/Rx';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\n\n@Injectable()\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService: DocumentListService,\n                private contentService: AlfrescoContentService) {\n        this.setupActionHandlers();\n    }\n\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    canExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFolder === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n    }\n\n    private copyNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(obj: any, target?: any, permission?: string): Observable<any> {\n        let handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(obj)) {\n            if (this.contentService.hasPermission(obj.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(obj.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n                    this.success.next(obj.entry.id);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return Observable.throw(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/folder-actions.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 12\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatePipe } from '@angular/common';\nimport { MinimalNode, MinimalNodeEntity, NodePaging } from 'alfresco-js-api';\nimport { ObjectUtils, TimeAgoPipe } from 'ng2-alfresco-core';\nimport { DataColumn, DataRow, DataSorting, DataTableAdapter } from 'ng2-alfresco-datatable';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\n\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\n\n    private sorting: DataSorting;\n    private rows: DataRow[];\n    private columns: DataColumn[];\n    private page: NodePaging;\n\n    private filter: RowFilter;\n    private imageResolver: ImageResolver;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n\n    constructor(private documentListService: DocumentListService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting) {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n    }\n\n    getRows(): Array<DataRow> {\n        return this.rows;\n    }\n\n    // TODO: disable this api\n    setRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n\n    getColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n\n    setColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n\n    getValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        let dataRow: ShareDataRow = <ShareDataRow> row;\n        let value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.type === 'date') {\n            try {\n                const result =  this.formatDate(col, value);\n                return dataRow.cacheValue(col.key, result);\n            } catch (err) {\n                console.error(`Error parsing date ${value} to format ${col.format}`);\n                return 'Error';\n            }\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            if (col.key === '$thumbnail') {\n                const node = (<ShareDataRow> row).node;\n\n                if (node.entry.isFolder) {\n                    return this.documentListService.getMimeTypeIcon('folder');\n                }\n\n                if (node.entry.isFile) {\n                    if (this.thumbnails) {\n                        return this.documentListService.getDocumentThumbnailUrl(node);\n                    }\n                }\n\n                if (node.entry.content) {\n                    const mimeType = node.entry.content.mimeType;\n                    if (mimeType) {\n                        return this.documentListService.getMimeTypeIcon(mimeType);\n                    }\n                }\n\n                return this.documentListService.getDefaultMimeTypeIcon();\n            }\n\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n\n    formatDate(col: DataColumn, value: any): string {\n        if (col.type === 'date') {\n            const format = col.format || 'medium';\n            if (format === 'timeAgo') {\n                const timeAgoPipe = new TimeAgoPipe();\n                return timeAgoPipe.transform(value);\n            } else {\n                const datePipe = new DatePipe('en-US');\n                return datePipe.transform(value, format);\n            }\n        }\n\n        return value;\n    }\n\n    getSorting(): DataSorting {\n        return this.sorting;\n    }\n\n    setSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n        this.sortRows(this.rows, this.sorting);\n    }\n\n    sort(key?: string, direction?: string): void {\n        let sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n\n    setFilter(filter: RowFilter) {\n        this.filter = filter;\n    }\n\n    setImageResolver(resolver: ImageResolver) {\n        this.imageResolver = resolver;\n    }\n\n    private sortRows(rows: DataRow[], sorting: DataSorting) {\n        if (sorting && sorting.key && rows && rows.length > 0) {\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right)\n                    : right.localeCompare(left);\n            });\n        }\n    }\n\n    public loadPage(page: NodePaging, merge: boolean = false) {\n        this.page = page;\n\n        let rows = [];\n\n        if (page && page.list) {\n            let data = page.list.entries;\n            if (data && data.length > 0) {\n                rows = data.map(item => new ShareDataRow(item, this.documentListService, this.permissionsStyle));\n\n                if (this.filter) {\n                    rows = rows.filter(this.filter);\n                }\n\n                // Sort by first sortable or just first column\n                if (this.columns && this.columns.length > 0) {\n                    let sorting = this.getSorting();\n                    if (sorting) {\n                        this.sortRows(rows, sorting);\n                    } else {\n                        let sortable = this.columns.filter(c => c.sortable);\n                        if (sortable.length > 0) {\n                            this.sort(sortable[0].key, 'asc');\n                        } else {\n                            this.sort(this.columns[0].key, 'asc');\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            this.rows = this.rows.concat(rows);\n        } else {\n            this.rows = rows;\n        }\n    }\n}\n\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n\n    get node(): MinimalNodeEntity {\n        return this.obj;\n    }\n\n    constructor(private obj: MinimalNodeEntity, private documentListService: DocumentListService, private permissionsStyle: PermissionStyleModel[]) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n\n    getPermissionClass(nodeEntity: MinimalNodeEntity): string {\n        let permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                     permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n\n    private applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n\n    private applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n\n    isFolderAndHasPermissionToUpload(obj: MinimalNodeEntity): boolean {\n        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');\n    }\n\n    isFolder(obj: MinimalNodeEntity): boolean {\n        return obj.entry && obj.entry.isFolder;\n    }\n\n    cacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n\n    getValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n\n    hasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n\nexport type RowFilter = (value: ShareDataRow, index: number, array: ShareDataRow[]) => any;\n\nexport type ImageResolver = (row: DataRow, column: DataColumn) => string;\n\n\n\n// WEBPACK FOOTER //\n// ./src/data/share-datatable-adapter.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean = false;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n            this.disabled = obj.disabled;\n        }\n    }\n}\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\n\nexport class DocumentActionModel extends ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\n\nexport class FolderActionModel extends  ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/content-action.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/permissions.model.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-datatable\"\n// module id = 16\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\n\n@Component({\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n})\nexport class ContentActionComponent implements OnInit, OnChanges {\n\n    @Input()\n    title: string = 'Action';\n\n    @Input()\n    icon: string;\n\n    @Input()\n    handler: string;\n\n    @Input()\n    target: string;\n\n    @Input()\n    permission: string;\n\n    @Input()\n    disableWithNoPermission: boolean;\n\n    @Input()\n    disabled: boolean = false;\n\n    @Output()\n    execute = new EventEmitter();\n\n    @Output()\n    permissionEvent = new EventEmitter();\n\n    @Output()\n    error = new EventEmitter();\n\n    @Output()\n    success = new EventEmitter();\n\n    model: ContentActionModel;\n\n    constructor(\n        private list: ContentActionListComponent,\n        private documentActions: DocumentActionsService,\n        private folderActions: FolderActionsService) {\n        this.model = new ContentActionModel();\n    }\n\n    ngOnInit() {\n        this.model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: this.target,\n            disabled: this.disabled\n        });\n\n        if (this.handler) {\n            this.model.handler = this.getSystemHandler(this.target, this.handler);\n        }\n\n        if (this.execute) {\n            this.model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerAction(this.model);\n        }\n        return false;\n    }\n\n    ngOnChanges(changes) {\n        // update localizable properties\n        this.model.title = this.title;\n    }\n\n    getSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            let ltarget = target.toLowerCase();\n\n            if (ltarget === 'document') {\n                if (this.documentActions) {\n                    this.documentActions.permissionEvent.subscribe((permision) => {\n                        this.permissionEvent.emit(permision);\n                    });\n\n                    this.documentActions.error.subscribe((errors) => {\n                        this.error.emit(errors);\n                    });\n\n                    this.documentActions.success.subscribe((message) => {\n                        this.success.emit(message);\n                    });\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (ltarget === 'folder') {\n                if (this.folderActions) {\n                    this.folderActions.permissionEvent.subscribe((permision) => {\n                        this.permissionEvent.emit(permision);\n                    });\n\n                    this.folderActions.error.subscribe((errors) => {\n                        this.error.emit(errors);\n                    });\n\n                    this.folderActions.success.subscribe((message) => {\n                        this.success.emit(message);\n                    });\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/content-action/content-action.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\nimport { DataColumn } from 'ng2-alfresco-datatable';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\n\n@Component({\n    selector: 'content-column',\n    template: ''\n})\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    @Input()\n    key: string;\n\n    @Input()\n    type: string = 'text';\n\n    @Input()\n    format: string;\n\n    @Input()\n    sortable: boolean = false;\n\n    @Input()\n    title: string = '';\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    /**\n     * Title to be used for screen readers.\n     */\n    @Input('sr-title')\n    srTitle: string;\n\n    @Input('class')\n    cssClass: string;\n\n    constructor(private list: ContentColumnListComponent) {\n        console.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n\n    ngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/content-column/content-column.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Directive({\n    selector: 'empty-folder-content'\n})\nexport class EmptyFolderContentDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.documentList.emptyFolderTemplate = this.template;\n        this.documentList.dataTable.noContentTemplate = this.template;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/empty-folder/empty-folder-content.directive.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { SiteModel, SitesApiService } from 'ng2-alfresco-core';\n\n@Component({\n    selector: 'adf-sites-dropdown',\n    styles: [require('./sites-dropdown.component.scss')],\n    template: require('./sites-dropdown.component.html')\n})\nexport class DropdownSitesComponent implements OnInit {\n\n    @Output()\n    change: EventEmitter<SiteModel> = new EventEmitter();\n\n    public DEFAULT_VALUE = 'default';\n\n    siteList = [];\n\n    public siteSelected: string;\n\n    constructor(private sitesService: SitesApiService) {\n    }\n\n    ngOnInit() {\n        this.sitesService.getSites().subscribe((result) => {\n            this.siteList = result;\n        });\n    }\n\n    selectedSite() {\n        let siteFound;\n        if (this.siteSelected === this.DEFAULT_VALUE) {\n            siteFound = new SiteModel();\n        }else {\n           siteFound = this.siteList.find( site => site.guid === this.siteSelected);\n        }\n        this.change.emit(siteFound);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/site-dropdown/sites-dropdown.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionsEnum } from 'ng2-alfresco-core';\n\nexport class PermissionStyleModel {\n    css: string;\n    permission: PermissionsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n\n    constructor(css: string, permission: PermissionsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/permissions-style.model.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from 'alfresco-js-api';\nimport { SearchOptions, SearchService } from 'ng2-alfresco-core';\nimport { Observable } from 'rxjs/Rx';\n\n/**\n * Internal service used by ContentNodeSelector component.\n */\n@Injectable()\nexport class ContentNodeSelectorService {\n\n    constructor(private searchService: SearchService) {}\n\n    /**\n     * Performs a search for content node selection\n     *\n     * @param searchTerm    The term to search for\n     * @param skipCount     From where to start the loading\n     * @param rootNodeId    The root is to start the search from\n     * @param maxItems      How many items to load\n     */\n    public search(searchTerm: string, rootNodeId: string, skipCount: number, maxItems: number): Observable<NodePaging> {\n\n        searchTerm = searchTerm + '*';\n\n        let searchOpts: SearchOptions = {\n            include: ['path', 'allowableOperations'],\n            skipCount,\n            rootNodeId,\n            nodeType: 'cm:folder',\n            maxItems,\n            orderBy: null\n        };\n\n        return this.searchService.getNodeQueryResults(searchTerm, searchOpts);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/content-node-selector/content-node-selector.service.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { BaseEvent } from 'ng2-alfresco-core';\n\nexport class NodeEntityEvent extends BaseEvent<MinimalNodeEntity> {\n    constructor(entity: MinimalNodeEntity) {\n        super();\n        this.value = entity;\n    }\n}\n\nexport class NodeEntryEvent extends BaseEvent<MinimalNodeEntryEntity> {\n    constructor(entity: MinimalNodeEntryEntity) {\n        super();\n        this.value = entity;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/node.event.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"alfresco-js-api\"\n// module id = 24\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MdSelect } from '@angular/material';\nimport { PathElementEntity } from 'alfresco-js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@Component({\n    selector: 'adf-dropdown-breadcrumb',\n    template: require('./dropdown-breadcrumb.component.html'),\n    styles: [require('./dropdown-breadcrumb.component.scss')],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n})\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n    @ViewChild(MdSelect) selectbox: MdSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n        this.recalculateNodes();\n    }\n\n    /**\n     * Calculate the current and previous nodes from the route array\n     */\n    private recalculateNodes(): void {\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n\n    /**\n     * Opens the selectbox overlay\n     */\n    open(): void {\n        if (this.selectbox) {\n            this.selectbox.open();\n        }\n    }\n\n    /**\n     * Return if route has more than one element (means: we are not in the root directory)\n     */\n    hasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/breadcrumb/dropdown-breadcrumb.component.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MdButtonModule,\n    MdDialogModule,\n    MdIconModule,\n    MdInputModule,\n    MdMenuModule,\n    MdOptionModule,\n    MdProgressSpinnerModule,\n    MdRippleModule,\n    MdSelectModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MdMenuModule,\n        MdDialogModule,\n        MdButtonModule,\n        MdIconModule,\n        MdInputModule,\n        MdProgressSpinnerModule,\n        MdSelectModule,\n        MdRippleModule,\n        MdOptionModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/material.module.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nexport class NodeMinimalEntry implements MinimalNodeEntity {\n    entry: NodeMinimal;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nexport class NodeMinimal implements MinimalNodeEntryEntity {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/document-library.model.ts","module.exports = __webpack_public_path__ + \"assets/images/empty_doc_lib.a89c064e4edfa54d2e347bf594947219.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/empty_doc_lib.svg\n// module id = 28\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            format: this.locationFormat,\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            format: this.locationFormat,\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            format: this.locationFormat,\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            format: this.locationFormat,\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/preset.model.ts","module.exports = \"<div *ngIf=\\\"folderNode\\\" data-automation-id=\\\"breadcrumb\\\" class=\\\"adf-breadcrumb-container\\\">\\n    <li *ngFor=\\\"let item of route; let last = last\\\"\\n        [class.active]=\\\"last\\\"\\n        [ngSwitch]=\\\"last\\\"\\n        title=\\\"{{ item.name | translate }}\\\"\\n        class=\\\"adf-breadcrumb-item\\\">\\n\\n        <a *ngSwitchDefault href=\\\"#\\\" [attr.data-automation-id]=\\\"'breadcrumb_' + item.name\\\"\\n           class=\\\"adf-breadcrumb-item-anchor\\\"\\n           (click)=\\\"onRoutePathClick(item, $event)\\\">\\n            {{ item.name | translate }}\\n        </a>\\n\\n        <div *ngSwitchCase=\\\"true\\\" class=\\\"adf-breadcrumb-item-current\\\">\\n            {{ item.name | translate }}\\n        </div>\\n\\n        <i class=\\\"material-icons adf-breadcrumb-item-chevron\\\" *ngIf=\\\"!last\\\">\\n            chevron_right\\n        </i>\\n    </li>\\n</div>\\n<div *ngIf=\\\"!folderNode && hasRoot\\\">\\n    <li class=\\\"adf-breadcrumb-item\\\">\\n        <div class=\\\"adf-breadcrumb-item-current\\\">\\n            {{ root | translate }}\\n        </div>\\n    </li>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/breadcrumb/breadcrumb.component.html\n// module id = 30\n// module chunks = 0","module.exports = \"<ng-container *ngIf=\\\"route.length > 0\\\">\\n\\n    <button\\n        tabindex=\\\"0\\\"\\n        class=\\\"adf-dropdown-breadcumb-trigger\\\"\\n        (click)=\\\"open()\\\"\\n        data-automation-id=\\\"dropdown-breadcrumb-trigger\\\">\\n        <md-icon [class.isRoot]=\\\"!hasPreviousNodes()\\\">folder</md-icon>\\n    </button>\\n    <i class=\\\"material-icons adf-dropddown-breadcrumb-item-chevron\\\">chevron_right</i>\\n\\n    <md-select\\n        *ngIf=\\\"hasPreviousNodes()\\\"\\n        class=\\\"adf-dropdown-breadcrumb-path\\\"\\n        tabindex=\\\"0\\\"\\n        data-automation-id=\\\"dropdown-breadcrumb-path\\\" >\\n\\n        <md-option\\n            *ngFor=\\\"let node of previousNodes;\\\"\\n            (click)=\\\"onRoutePathClick(node, $event)\\\"\\n            class=\\\"adf-dropdown-breadcrumb-path-option\\\"\\n            tabindex=\\\"0\\\"\\n            data-automation-class=\\\"dropdown-breadcrumb-path-option\\\">\\n            {{ node.name }}\\n        </md-option>\\n    </md-select>\\n\\n    <span\\n        class=\\\"adf-current-folder\\\"\\n        [class.isRoot]=\\\"!hasPreviousNodes()\\\"\\n        data-automation-id=\\\"current-folder\\\">{{ currentNode.name }}</span>\\n</ng-container>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/breadcrumb/dropdown-breadcrumb.component.html\n// module id = 31\n// module chunks = 0","module.exports = \"<header mdDialogTitle\\n    class=\\\"adf-content-node-selector-title\\\"\\n    data-automation-id=\\\"content-node-selector-title\\\">{{title}}</header>\\n\\n<section mdDialogContent\\n    class=\\\"adf-content-node-selector-content\\\"\\n    (node-select)=\\\"onNodeSelect($event)\\\">\\n\\n    <md-input-container floatPlaceholder=\\\"never\\\" class=\\\"adf-content-node-selector-content-input\\\">\\n        <input #searchInput\\n            mdInput\\n            placeholder=\\\"Search\\\"\\n            (input)=\\\"search(searchInput.value)\\\"\\n            [value]=\\\"searchTerm\\\"\\n            data-automation-id=\\\"content-node-selector-search-input\\\">\\n\\n        <md-icon *ngIf=\\\"searchTerm.length > 0\\\"\\n                mdSuffix (click)=\\\"clear()\\\"\\n                class=\\\"adf-content-node-selector-content-input-icon\\\"\\n                data-automation-id=\\\"content-node-selector-search-clear\\\">clear</md-icon>\\n\\n        <md-icon *ngIf=\\\"searchTerm.length === 0\\\"\\n            mdSuffix\\n            class=\\\"adf-content-node-selector-content-input-icon\\\"\\n            data-automation-id=\\\"content-node-selector-search-icon\\\">search</md-icon>\\n\\n    </md-input-container>\\n\\n    <adf-sites-dropdown\\n        (change)=\\\"siteChanged($event)\\\"\\n        data-automation-id=\\\"content-node-selector-sites-combo\\\"></adf-sites-dropdown>\\n\\n    <adf-toolbar>\\n        <adf-toolbar-title>\\n            <adf-dropdown-breadcrumb *ngIf=\\\"needBreadcrumbs()\\\"\\n                class=\\\"adf-content-node-selector-content-breadcrumb\\\"\\n                [target]=\\\"documentList\\\"\\n                [folderNode]=\\\"breadcrumbFolderNode\\\"\\n                data-automation-id=\\\"content-node-selector-content-breadcrumb\\\">\\n            </adf-dropdown-breadcrumb>\\n        </adf-toolbar-title>\\n    </adf-toolbar>\\n\\n    <div class=\\\"adf-content-node-selector-content-list\\\" data-automation-id=\\\"content-node-selector-content-list\\\">\\n        <adf-document-list\\n                    #documentList\\n                    adf-highlight\\n                    adf-highlight-selector=\\\".cell-value adf-datatable-cell .adf-datatable-cell-value\\\"\\n                    [node]=\\\"nodes\\\"\\n                    [rowFilter]=\\\"rowFilter\\\"\\n                    [imageResolver]=\\\"imageResolver\\\"\\n                    [currentFolderId]=\\\"folderIdToShow\\\"\\n                    selectionMode=\\\"single\\\"\\n                    [contextMenuActions]=\\\"false\\\"\\n                    [contentActions]=\\\"false\\\"\\n                    [allowDropFiles]=\\\"false\\\"\\n                    [enablePagination]=\\\"!showingSearchResults\\\"\\n                    paginationStrategy=\\\"{{paginationStrategy}}\\\"\\n                    [pageSize]=\\\"pageSize\\\"\\n                    (folderChange)=\\\"onFolderChange()\\\"\\n                    (ready)=\\\"onFolderLoaded()\\\"\\n                    data-automation-id=\\\"content-node-selector-document-list\\\">\\n            <empty-folder-content>\\n                <ng-template>\\n                    <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\\n                </ng-template>\\n            </empty-folder-content>\\n        </adf-document-list>\\n\\n        <adf-infinite-pagination\\n            *ngIf=\\\"showingSearchResults && isSearchTermLongEnough()\\\"\\n            [pagination]=\\\"pagination\\\"\\n            [pageSize]=\\\"pageSize\\\"\\n            [loading]=\\\"loadingSearchResults\\\"\\n            (loadMore)=\\\"getNextPageOfSearch($event)\\\"\\n            data-automation-id=\\\"content-node-selector-search-pagination\\\">\\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\\n        </adf-infinite-pagination>\\n    </div>\\n\\n</section>\\n\\n<footer mdDialogActions class=\\\"adf-content-node-selector-actions\\\">\\n\\n    <button *ngIf=\\\"inDialog\\\"\\n        md-button\\n        class=\\\"adf-content-node-selector-actions-cancel\\\"\\n        (click)=\\\"close()\\\"\\n        data-automation-id=\\\"content-node-selector-actions-cancel\\\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\\n    </button>\\n\\n    <button md-button\\n        [disabled]=\\\"!chosenNode\\\"\\n        class=\\\"adf-content-node-selector-actions-choose\\\"\\n        (click)=\\\"choose()\\\"\\n        data-automation-id=\\\"content-node-selector-actions-choose\\\">{{ 'NODE_SELECTOR.CHOOSE' | translate }}\\n    </button>\\n\\n</footer>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/content-node-selector/content-node-selector.component.html\n// module id = 32\n// module chunks = 0","module.exports = \"<adf-datatable\\n    [selectionMode]=\\\"selectionMode\\\"\\n    [data]=\\\"data\\\"\\n    [actions]=\\\"contentActions\\\"\\n    [actionsPosition]=\\\"contentActionsPosition\\\"\\n    [multiselect]=\\\"multiselect\\\"\\n    [allowDropFiles]=\\\"allowDropFiles\\\"\\n    [contextMenu]=\\\"contextMenuActions\\\"\\n    [rowStyle]=\\\"rowStyle\\\"\\n    [rowStyleClass]=\\\"rowStyleClass\\\"\\n    [loading]=\\\"loading\\\"\\n    [showHeader]=\\\"!isEmpty()\\\"\\n    (showRowContextMenu)=\\\"onShowRowContextMenu($event)\\\"\\n    (showRowActionsMenu)=\\\"onShowRowActionsMenu($event)\\\"\\n    (executeRowAction)=\\\"onExecuteRowAction($event)\\\"\\n    (rowClick)=\\\"onNodeClick($event.value?.node)\\\"\\n    (rowDblClick)=\\\"onNodeDblClick($event.value?.node)\\\"\\n    (row-select)=\\\"onNodeSelect($event.detail)\\\"\\n    (row-unselect)=\\\"onNodeUnselect($event.detail)\\\">\\n\\n    <div *ngIf=\\\"!isEmptyTemplateDefined()\\\">\\n        <no-content-template>\\n            <ng-template>\\n                <adf-empty-list>\\n                    <div class=\\\"adf-empty-list_template adf-empty-folder\\\">\\n                        <div class=\\\"adf-empty-folder-this-space-is-empty\\\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\\n                        <div class=\\\"adf-empty-folder-drag-drop\\\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\\n                        <div class=\\\"adf-empty-folder-any-files-here-to-add\\\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\\n                        <img class=\\\"adf-empty-folder-image\\\" [src]=\\\"emptyFolderImageUrl\\\">\\n                    </div>\\n                    <!-- <div adf-empty-list-header class=\\\"adf-empty-list-header\\\"> {{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}} </div> -->\\n                </adf-empty-list>\\n            </ng-template>\\n        </no-content-template>\\n    </div>\\n\\n    <div>\\n        <loading-content-template>\\n            <ng-template>\\n                <div class=\\\"adf-document-list-loading-container\\\">\\n                    <md-progress-spinner\\n                        id=\\\"adf-document-list-loading\\\"\\n                        class=\\\"adf-document-list-loading-margin\\\"\\n                        [color]=\\\"'primary'\\\"\\n                        [mode]=\\\"'indeterminate'\\\">\\n                    </md-progress-spinner>\\n                </div>\\n            </ng-template>\\n        </loading-content-template>\\n    </div>\\n</adf-datatable>\\n\\n<ng-container *ngIf=\\\"isPaginationEnabled()\\\">\\n    <adf-pagination\\n        *ngIf=\\\"isPaginationNeeded()\\\"\\n        class=\\\"adf-documentlist-pagination\\\"\\n        (changePageSize)=\\\"onChangePageSize($event)\\\"\\n        (changePageNumber)=\\\"onChangePageNumber($event)\\\"\\n        (nextPage)=\\\"onNextPage($event)\\\"\\n        (prevPage)=\\\"onPrevPage($event)\\\"\\n        [pagination]=\\\"pagination\\\"\\n        [supportedPageSizes]=\\\"supportedPageSizes\\\">\\n    </adf-pagination>\\n\\n    <adf-infinite-pagination\\n        *ngIf=\\\"!isPaginationNeeded()\\\"\\n        [pagination]=\\\"pagination\\\"\\n        [pageSize]=\\\"pageSize\\\"\\n        [loading]=\\\"infiniteLoading\\\"\\n        (loadMore)=\\\"loadNextBatch($event)\\\">\\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\\n    </adf-infinite-pagination>\\n</ng-container>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/document-list.component.html\n// module id = 33\n// module chunks = 0","module.exports = \"<div id=\\\"site-dropdown-container\\\" class=\\\"adf-site-dropdown-container\\\">\\n    <md-select class=\\\"adf-site-dropdown-list-element\\\" id=\\\"site-dropdown\\\"\\n        placeholder=\\\"{{'DROPDOWN.PLACEHOLDER_LABEL' | translate}}\\\"\\n        floatPlaceholder=\\\"never\\\"\\n        [(ngModel)]=\\\"siteSelected\\\"\\n        (ngModelChange)=\\\"selectedSite()\\\">\\n        <md-option id=\\\"default_site_option\\\" [value]=\\\"DEFAULT_VALUE\\\">{{'DROPDOWN.DEFAULT_OPTION' | translate}}</md-option>\\n        <md-option *ngFor=\\\"let site of siteList\\\" [value]=\\\"site.guid\\\">\\n            {{ site.title }}\\n        </md-option>\\n    </md-select>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/site-dropdown/sites-dropdown.component.html\n// module id = 34\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/breadcrumb/breadcrumb.component.scss\n// module id = 35\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/breadcrumb/dropdown-breadcrumb.component.scss\n// module id = 36\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/content-node-selector/content-node-selector.component.scss\n// module id = 37\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/document-list.component.scss\n// module id = 38\n// module chunks = 0","module.exports = \".adf-site-dropdown-list-element {\\n  width: 300px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/site-dropdown/sites-dropdown.component.scss\n// module id = 39\n// module chunks = 0","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./breadcrumb.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/breadcrumb/breadcrumb.component.scss\n// module id = 40\n// module chunks = 0","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./dropdown-breadcrumb.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/breadcrumb/dropdown-breadcrumb.component.scss\n// module id = 41\n// module chunks = 0","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./content-node-selector.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/content-node-selector/content-node-selector.component.scss\n// module id = 42\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/raw-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./document-list.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/document-list.component.scss\n// module id = 43\n// module chunks = 0","\n        var result = require(\"!!../../../node_modules/raw-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./sites-dropdown.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/site-dropdown/sites-dropdown.component.scss\n// module id = 44\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_45__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/common\"\n// module id = 45\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_46__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"rxjs/Observable\"\n// module id = 46\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\nimport { DataTableModule } from 'ng2-alfresco-datatable';\n\nimport { BreadcrumbComponent } from './src/components/breadcrumb/breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './src/components/breadcrumb/dropdown-breadcrumb.component';\nimport { ContentActionListComponent } from './src/components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './src/components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './src/components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './src/components/content-column/content-column.component';\nimport { ContentNodeSelectorComponent } from './src/components/content-node-selector/content-node-selector.component';\nimport { DocumentListComponent } from './src/components/document-list.component';\nimport { EmptyFolderContentDirective } from './src/components/empty-folder/empty-folder-content.directive';\nimport { DropdownSitesComponent } from './src/components/site-dropdown/sites-dropdown.component';\nimport { MaterialModule } from './src/material.module';\n\nimport { ContentNodeSelectorService } from './src/components/content-node-selector/content-node-selector.service';\nimport { DocumentActionsService } from './src/services/document-actions.service';\nimport { DocumentListService } from './src/services/document-list.service';\nimport { FolderActionsService } from './src/services/folder-actions.service';\nimport { NodeActionsService } from './src/services/node-actions.service';\n\n// components\nexport * from './src/components/document-list.component';\nexport * from './src/components/node.event';\nexport * from './src/components/content-column/content-column.component';\nexport * from './src/components/content-column/content-column-list.component';\nexport * from './src/components/content-action/content-action.component';\nexport * from './src/components/content-action/content-action-list.component';\nexport * from './src/components/content-node-selector/content-node-selector.component';\nexport * from './src/components/empty-folder/empty-folder-content.directive';\nexport * from './src/components/breadcrumb/breadcrumb.component';\nexport * from './src/components/site-dropdown/sites-dropdown.component';\n\n// data\nexport * from './src/data/share-datatable-adapter';\n\n// services\nexport * from './src/services/folder-actions.service';\nexport * from './src/services/document-actions.service';\nexport * from './src/services/document-list.service';\nexport * from './src/services/node-actions.service';\n\n// models\nexport * from './src/models/content-action.model';\nexport * from './src/models/document-library.model';\nexport * from './src/models/permissions.model';\nexport * from './src/models/permissions-style.model';\nexport * from './src/models/permissions-style.model';\n\nexport const DOCUMENT_LIST_DIRECTIVES: any[] = [\n    DocumentListComponent,\n    ContentColumnComponent,\n    ContentColumnListComponent,\n    ContentActionComponent,\n    ContentActionListComponent,\n    EmptyFolderContentDirective,\n    BreadcrumbComponent,\n    DropdownSitesComponent,\n    DropdownBreadcrumbComponent,\n    ContentNodeSelectorComponent\n];\n\nexport const DOCUMENT_LIST_PROVIDERS: any[] = [\n    DocumentListService,\n    FolderActionsService,\n    DocumentActionsService,\n    NodeActionsService,\n    ContentNodeSelectorService\n];\n\n@NgModule({\n    imports: [\n        CoreModule,\n        DataTableModule,\n        MaterialModule\n    ],\n    declarations: [\n        ...DOCUMENT_LIST_DIRECTIVES\n    ],\n    providers: [\n        ...DOCUMENT_LIST_PROVIDERS,\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-alfresco-documentlist',\n                source: 'assets/ng2-alfresco-documentlist'\n            }\n        }\n    ],\n    entryComponents: [\n        ContentNodeSelectorComponent\n    ],\n    exports: [\n        DataTableModule,\n        ...DOCUMENT_LIST_DIRECTIVES,\n        MaterialModule\n    ]\n})\nexport class DocumentListModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./index.ts"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChEA;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAQA;AAyHA;AAAA;AACA;AACA;AACA;AACA;AACA;AArHA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAYA;AAGA;AAKA;AAEA;AACA;AAIA;AAGA;AAIA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAMA;AAEA;AAGA;AACA;AACA;AAQA;AACA;AAhIA;AAkvBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AASA;AADA;;AACA;AAGA;AADA;;AACA;AAIA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAwMA;AADA;;;;AAKA;AAzTA;AANA;AACA;AACA;AACA;AACA;AACA;AA0HA;AAzHA;AA8vBA;;AAAA;AA9vBA;;;;;;;;;AC7CA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAGA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AA1HA;AAFA;AADA;AAKA;AAJA;AA6HA;;AAAA;AA7HA;;;;;;;;;ACxBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AAAA;AACA;AACA;AAAA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAUA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAtGA;AADA;AAGA;AAFA;AAuGA;;AAAA;AAvGA;;;;;;;AC5BA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AAWA;AATA;AAYA;AAGA;AAGA;AAKA;AAOA;AA4DA;AAjEA;AAAA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AA7EA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AASA;AADA;AACA;AAAA;AArBA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiFA;;AAAA;AAjFA;;;;;;;;;AC9BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AAGA;AAMA;AAEA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAJA;AACA;AACA;AACA;AAGA;AAFA;AAgBA;;AAAA;AAhBA;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AAGA;AAMA;AAEA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAJA;AACA;AACA;AACA;AAGA;AAFA;AAkBA;;AAAA;AAlBA;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAgBA;AAsCA;AAAA;AACA;AAEA;AAvCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AAGA;AAGA;AAGA;AAGA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAzOA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AAGA;AADA;AACA;AAAA;AApCA;AANA;AACA;AACA;AACA;AACA;AACA;AAyCA;AACA;AAHA;AAtCA;AAyPA;;AAAA;AAzPA;;;;;;;;;ACvCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAQA;AAAA;AACA;AACA;AARA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAjGA;AADA;AASA;AARA;AAkGA;;AAAA;AAlGA;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAQA;AAAA;AACA;AACA;AARA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnFA;AADA;AASA;AARA;AAoFA;;AAAA;AApFA;;;;;;;AC3BA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AAEA;AAEA;AACA;AAIA;AAiBA;AACA;AADA;AAfjNA;AAmNA;AAaA;AAAA;AAAA;AAAA;AATA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAdA;AAAA;AACA;AACA;;;AAAA;AAcA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtEA;AAuEA;AAAA;AAzEA;;;;;;;;;AC3OA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAEA;AAUA;AAHA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtBA;AA0BA;AAAA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AALA;AAOA;AAAA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AALA;;;;;;;;;AClDA;;;;;;;;;;;;;;;AAeA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;;;;;;;ACjBA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AAGA;AACA;AACA;AACA;AAUA;AAqCA;AACA;AACA;AACA;AArCA;AAkBA;AAGA;AAGA;AAGA;AAGA;AAQA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvHA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAjCA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuCA;AAtCA;AA2HA;;AAAA;AA3HA;;;;;;;;;ACnCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAIA;AAGA;AAMA;AA6BA;AAAA;AAvBA;AAMA;AAGA;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA7CA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAMA;AADA;;AACA;AAGA;AADA;;AACA;AA3BA;AAJA;AACA;AACA;AACA;AA8BA;AA7BA;AAiDA;;AAAA;AAjDA;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAKA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AACA;AARA;AADA;;AACA;AAHA;AAHA;AACA;AACA;AAMA;AALA;AAYA;;AAAA;AAZA;;;;;;;;;ACvBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AAOA;AAWA;AAAA;AARA;AAEA;AAEA;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAzBA;AADA;AACA;AAAA;AAHA;AALA;AACA;AACA;AACA;AACA;AAYA;AAXA;AA8BA;;AAAA;AA9BA;;;;;;;;;ACzBA;;;;;;;;;;;;;;;AAeA;;AAIA;AAMA;AAAA;AAAA;AAHA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;;;;;;;;;ACnBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAEA;AAOA;AAEA;AAAA;AAAA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA1BA;AADA;AAGA;AAFA;AA2BA;;AAAA;AA3BA;;;;;;;;;AC1BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAGA;AAEA;AAAA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AALA;AAOA;AAAA;AACA;AAAA;AAEA;;AACA;AACA;AAAA;AALA;;;;;;;AC3BA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AAWA;AAAA;AAAA;;AAkCA;AA5BA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAhCA;AAAA;AAAA;AAAA;AADA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA;;AAAA;AAlCA;;;;;;;;;AC/BA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAkBA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;AChDA;;;;;;;;;;;;;;;AAeA;;AAMA;AAAA;AAEA;AAAA;AAAA;AAFA;AAIA;AAAA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AAAA;AAAA;AAFA;AAIA;AAAA;AAMA;AAAA;AAAA;AANA;AAQA;AAAA;AAaA;AACA;AAAA;AAAA;AAdA;AAgBA;AAAA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAKA;AAAA;AAAA;AALA;AAOA;AAAA;AAIA;AAAA;AAAA;AAJA;AAMA;AAAA;AAGA;AAAA;AAAA;AAHA;;;;;;;AC5EA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeeA;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA+BA;AAAA;AAAA;AAAA;AA7BA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;","sourceRoot":""}