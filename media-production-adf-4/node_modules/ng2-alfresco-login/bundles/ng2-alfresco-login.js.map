{"version":3,"file":"./bundles/ng2-alfresco-login.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1f81856e96d133efc54b","webpack:///./src/components/login.component.ts","webpack:///external \"@angular/core\"","webpack:///./src/directives/login-footer.directive.ts","webpack:///./src/directives/login-header.directive.ts","webpack:///external \"@angular/router\"","webpack:///external \"ng2-alfresco-core\"","webpack:///./src/material.module.ts","webpack:///./src/assets/images/alfresco-logo.svg","webpack:///./src/assets/images/background.svg","webpack:///./src/models/form-submit-event.model.ts","webpack:///./src/components/login.component.html","webpack:///./src/components/login.component.scss","webpack:///./src/components/login.component.scss?05c9","webpack:///external \"@angular/forms\"","webpack:///external \"@angular/material\"","webpack:///./index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/router\"), require(\"ng2-alfresco-core\"), require(\"@angular/forms\"), require(\"@angular/material\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"@angular/router\", \"ng2-alfresco-core\", \"@angular/forms\", \"@angular/material\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-alfresco-login\"] = factory(require(\"@angular/core\"), require(\"@angular/router\"), require(\"ng2-alfresco-core\"), require(\"@angular/forms\"), require(\"@angular/material\"));\n\telse\n\t\troot[\"ng2-alfresco-login\"] = factory(root[\"@angular/core\"], root[\"@angular/router\"], root[\"ng2-alfresco-core\"], root[\"@angular/forms\"], root[\"@angular/material\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1f81856e96d133efc54b","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlfrescoAuthenticationService, AlfrescoSettingsService, AlfrescoTranslationService, LogService } from 'ng2-alfresco-core';\nimport { FormSubmitEvent } from '../models/form-submit-event.model';\n\ndeclare var require: any;\n\nenum LoginSteps {\n    Landing = 0,\n    Checking = 1,\n    Welcome = 2\n}\n\n@Component({\n    selector: 'adf-login, alfresco-login',\n    template: require('./login.component.html'),\n    styles: [require('./login.component.scss')],\n    host: {'(blur)': 'onBlur($event)'},\n    encapsulation: ViewEncapsulation.None\n})\nexport class LoginComponent implements OnInit {\n\n    isPasswordShow: boolean = false;\n\n    @Input()\n    showRememberMe: boolean = true;\n\n    @Input()\n    showLoginActions: boolean = true;\n\n    @Input()\n    needHelpLink: string = '';\n\n    @Input()\n    registerLink: string = '';\n\n    @Input()\n    logoImageUrl: string = require('../assets/images/alfresco-logo.svg');\n\n    @Input()\n    backgroundImageUrl: string = require('../assets/images/background.svg');\n\n    @Input()\n    copyrightText: string = '\\u00A9 2016 Alfresco Software, Inc. All Rights Reserved.';\n\n    @Input()\n    providers: string;\n\n    @Input()\n    fieldsValidation: any;\n\n    @Input()\n    disableCsrf: boolean;\n\n    @Input()\n    successRoute: string = null;\n\n    @Output()\n    onSuccess = new EventEmitter();\n\n    @Output()\n    onError = new EventEmitter();\n\n    @Output()\n    executeSubmit: EventEmitter<FormSubmitEvent> = new EventEmitter<FormSubmitEvent>();\n\n    form: FormGroup;\n    error: boolean = false;\n    errorMsg: string;\n    success: boolean = false;\n    actualLoginStep: any = LoginSteps.Landing;\n    LoginSteps: any = LoginSteps;\n    rememberMe: boolean = true;\n    formError: { [id: string]: string };\n    minLength: number = 2;\n    footerTemplate: TemplateRef<any>;\n    headerTemplate: TemplateRef<any>;\n    data: any;\n\n    private _message: { [id: string]: { [id: string]: string } };\n\n    /**\n     * Constructor\n     * @param _fb\n     * @param authService\n     * @param settingsService\n     * @param translate\n     */\n    constructor(private _fb: FormBuilder,\n                private authService: AlfrescoAuthenticationService,\n                private settingsService: AlfrescoSettingsService,\n                private translateService: AlfrescoTranslationService,\n                private logService: LogService,\n                private elementRef: ElementRef,\n                private router: Router) {\n        this.initFormError();\n        this.initFormFieldsMessages();\n    }\n\n    ngOnInit() {\n        if (this.hasCustomFiledsValidation()) {\n            this.form = this._fb.group(this.fieldsValidation);\n        } else {\n            this.initFormFieldsDefault();\n            this.initFormFieldsMessagesDefault();\n        }\n        this.form.valueChanges.subscribe(data => this.onValueChanged(data));\n    }\n\n    /**\n     * Method called on submit form\n     * @param values\n     * @param event\n     */\n    onSubmit(values: any) {\n        if (!this.checkRequiredParams()) {\n            return false;\n        }\n        this.settingsService.setProviders(this.providers);\n        this.settingsService.csrfDisabled = this.disableCsrf;\n\n        this.disableError();\n\n        let args = new FormSubmitEvent(this.form);\n        this.executeSubmit.emit(args);\n\n        if (args.defaultPrevented) {\n            return false;\n        } else {\n            this.performLogin(values);\n        }\n    }\n\n    /**\n     * The method check the error in the form and push the error in the formError object\n     * @param data\n     */\n    onValueChanged(data: any) {\n        this.success = false;\n        this.disableError();\n        for (let field in this.formError) {\n            if (field) {\n                this.formError[field] = '';\n                let hasError = (this.form.controls[field].errors && data[field] !== '') ||\n                    (this.form.controls[field].dirty && !this.form.controls[field].valid);\n                if (hasError) {\n                    for (let key in this.form.controls[field].errors) {\n                        if (key) {\n                            this.formError[field] += this._message[field][key] + '';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Performe the login service\n     * @param values\n     */\n    private performLogin(values: any) {\n        this.actualLoginStep = LoginSteps.Checking;\n        this.authService.login(values.username, values.password, this.rememberMe)\n            .subscribe(\n                (token: any) => {\n                    this.actualLoginStep = LoginSteps.Welcome;\n                    this.success = true;\n                    this.onSuccess.emit({token: token, username: values.username, password: values.password});\n                    if (this.successRoute) {\n                        this.router.navigate([this.successRoute]);\n                    }\n                },\n                (err: any) => {\n                    this.actualLoginStep = LoginSteps.Landing;\n                    this.displayErrorMessage(err);\n                    this.enableError();\n                    this.onError.emit(err);\n                },\n                () => this.logService.info('Login done')\n            );\n    }\n\n    /**\n     * Check and display the right error message in the UI\n     */\n    private displayErrorMessage(err: any): void {\n        if (err.error && err.error.crossDomain && err.error.message.indexOf('Access-Control-Allow-Origin') !== -1) {\n            this.errorMsg = err.error.message;\n            return;\n        }\n\n        if (err.status === 403 && err.message.indexOf('Invalid CSRF-token') !== -1) {\n            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-CSRF';\n            return;\n        }\n\n        if (err.status === 403 && err.message.indexOf('The system is currently in read-only mode') !== -1) {\n            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ECM-LICENSE';\n            return;\n        }\n\n        this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-CREDENTIALS';\n    }\n\n    /**\n     * Check the require parameter\n     * @returns {boolean}\n     */\n    private checkRequiredParams(): boolean {\n        if (this.providers === undefined || this.providers === null || this.providers === '') {\n            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-PROVIDERS';\n            this.enableError();\n            let messageProviders: any;\n            messageProviders = this.translateService.get(this.errorMsg);\n            this.onError.emit(messageProviders.value);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Add a custom form error for a field\n     * @param field\n     * @param msg\n     */\n    public addCustomFormError(field: string, msg: string) {\n        this.formError[field] += msg;\n    }\n\n    /**\n     * Add a custom validation rule error for a field\n     * @param field\n     * @param ruleId - i.e. required | minlength | maxlength\n     * @param msg\n     */\n    public addCustomValidationError(field: string, ruleId: string, msg: string, params?: any) {\n        if (params) {\n            this.translateService.get(msg, params).subscribe((res: string) => {\n                this._message[field][ruleId] = res;\n            });\n        } else {\n            this._message[field][ruleId] = msg;\n        }\n    }\n\n    /**\n     * Display and hide the password value.\n     */\n    toggleShowPassword() {\n        this.isPasswordShow = !this.isPasswordShow;\n        this.elementRef.nativeElement.querySelector('#password').type = this.isPasswordShow ? 'text' : 'password';\n    }\n\n    /**\n     * The method return if a field is valid or not\n     * @param field\n     * @returns {boolean}\n     */\n    isErrorStyle(field: AbstractControl) {\n        return !field.valid && field.dirty && !field.pristine;\n    }\n\n    /**\n     * Trim username\n     */\n    trimUsername(event: any) {\n        event.target.value = event.target.value.trim();\n    }\n\n    /**\n     * Default formError values\n     */\n    private initFormError() {\n        this.formError = {\n            'username': '',\n            'password': ''\n        };\n    }\n\n    /**\n     * Init form fields messages\n     */\n    private initFormFieldsMessages() {\n        this._message = {\n            'username': {},\n            'password': {}\n        };\n    }\n\n    /**\n     * Default form fields messages\n     */\n    private initFormFieldsMessagesDefault() {\n        this._message = {\n            'username': {\n                'required': 'LOGIN.MESSAGES.USERNAME-REQUIRED'\n            },\n            'password': {\n                'required': 'LOGIN.MESSAGES.PASSWORD-REQUIRED'\n            }\n        };\n\n        this.translateService.get('LOGIN.MESSAGES.USERNAME-MIN', {minLength: this.minLength}).subscribe((res: string) => {\n            this._message['username']['minlength'] = res;\n        });\n    }\n\n    private initFormFieldsDefault() {\n        this.form = this._fb.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n    }\n\n    /**\n     * Disable the error flag\n     */\n    private disableError() {\n        this.error = false;\n        this.initFormError();\n    }\n\n    /**\n     * Enable the error flag\n     */\n    private enableError() {\n        this.error = true;\n    }\n\n    private hasCustomFiledsValidation(): boolean {\n        return this.fieldsValidation !== undefined;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/login.component.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 1\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    TemplateRef\n} from '@angular/core';\nimport { LoginComponent } from '../components/login.component';\n\n@Directive({\n    selector: 'login-footer'\n})\nexport class LoginFooterDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(\n        private alfrescoLoginComponent: LoginComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.alfrescoLoginComponent.footerTemplate = this.template;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/directives/login-footer.directive.ts","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    TemplateRef\n} from '@angular/core';\nimport { LoginComponent } from '../components/login.component';\n\n@Directive({\n    selector: 'login-header'\n})\nexport class LoginHeaderDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(\n        private alfrescoLoginComponent: LoginComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.alfrescoLoginComponent.headerTemplate = this.template;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/directives/login-header.directive.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/router\"\n// module id = 4\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ng2-alfresco-core\"\n// module id = 5\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MdCheckboxModule,\n    MdIconModule,\n    MdInputModule,\n    MdProgressSpinnerModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MdCheckboxModule,\n        MdIconModule,\n        MdInputModule,\n        MdProgressSpinnerModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/material.module.ts","module.exports = __webpack_public_path__ + \"assets/images/alfresco-logo.2db246e1d7e6fca3effb566e92e51f42.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/alfresco-logo.svg\n// module id = 7\n// module chunks = 0","module.exports = __webpack_public_path__ + \"assets/images/background.fa3544aac8d4255bcb78b25374bd0fe4.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/images/background.svg\n// module id = 8\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class FormSubmitEvent {\n\n    private _values: any;\n    private _defaultPrevented: boolean = false;\n\n    get values(): any {\n        return this._values;\n    }\n\n    get defaultPrevented() {\n        return this._defaultPrevented;\n    }\n\n    constructor(_values: any) {\n        this._values = _values;\n    }\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/form-submit-event.model.ts","module.exports = \"<div class=\\\"adf-login-content\\\"\\n     [style.background-image]=\\\"'url(' + backgroundImageUrl + ')'\\\">\\n    <md-card class=\\\"adf-login-card-wide\\\">\\n        <form [formGroup]=\\\"form\\\" (submit)=\\\"onSubmit(form.value)\\\">\\n\\n            <md-card-header>\\n                <md-card-title>\\n                    <div class=\\\"adf-alfresco-logo\\\">\\n                        <!--HEADER TEMPLATE-->\\n                        <ng-template *ngIf=\\\"headerTemplate\\\"\\n                                     ngFor [ngForOf]=\\\"[data]\\\"\\n                                     [ngForTemplate]=\\\"headerTemplate\\\">\\n                        </ng-template>\\n                        <img *ngIf=\\\"!headerTemplate\\\" class=\\\"adf-img-logo\\\" [src]=\\\"logoImageUrl\\\"\\n                             alt=\\\"{{'LOGIN.LOGO' | translate }}\\\">\\n                    </div>\\n                </md-card-title>\\n            </md-card-header>\\n\\n            <md-card-content class=\\\"adf-login-controls\\\">\\n\\n                <!--ERRORS AREA-->\\n                <div class=\\\"adf-error-container\\\">\\n                    <div *ngIf=\\\"error\\\" id=\\\"login-error\\\" data-automation-id=\\\"login-error\\\"\\n                         class=\\\"error  adf-error-message\\\">\\n                        <md-icon class=\\\"error-icon\\\">warning</md-icon>\\n                        <span class=\\\"login-error-message\\\">{{errorMsg | translate }}</span>\\n                    </div>\\n                    <div *ngIf=\\\"success\\\" id=\\\"login-success\\\" data-automation-id=\\\"login-success\\\"\\n                         class=\\\"adf-login-message\\\">\\n                        {{'LOGIN.MESSAGES.LOGIN-SUCCESS' | translate }}\\n                    </div>\\n                </div>\\n\\n                <!--USERNAME FIELD-->\\n                <div class=\\\"adf-login__field\\\" [ngClass]=\\\"{'is-invalid': isErrorStyle(form.controls.username)}\\\">\\n                    <md-input-container class=\\\"adf-full-width\\\" floatPlaceholder=\\\"never\\\" color=\\\"primary\\\">\\n                        <input mdInput placeholder=\\\"{{'LOGIN.LABEL.USERNAME' | translate }}\\\"\\n                               type=\\\"text\\\"\\n                               class=\\\"adf-full-width\\\"\\n                               [formControl]=\\\"form.controls['username']\\\"\\n                               autocapitalize=\\\"none\\\"\\n                               id=\\\"username\\\"\\n                               data-automation-id=\\\"username\\\"\\n                               (blur)=\\\"trimUsername($event)\\\"\\n                               tabindex=\\\"1\\\">\\n                    </md-input-container>\\n\\n                    <span class=\\\"adf-login-validation\\\" for=\\\"username\\\" *ngIf=\\\"formError.username\\\">\\n                        <span id=\\\"username-error\\\" class=\\\"adf-login-error\\\" data-automation-id=\\\"username-error\\\">{{formError.username | translate }}</span>\\n                    </span>\\n                </div>\\n\\n                <!--PASSWORD FIELD-->\\n                <div class=\\\"adf-login__field alfresco-login__password\\\">\\n                    <md-input-container class=\\\"adf-full-width\\\" floatPlaceholder=\\\"never\\\" color=\\\"primary\\\">\\n                        <input mdInput placeholder=\\\"{{'LOGIN.LABEL.PASSWORD' | translate }}\\\"\\n                               type=\\\"password\\\"\\n                               [formControl]=\\\"form.controls['password']\\\"\\n                               id=\\\"password\\\"\\n                               data-automation-id=\\\"password\\\"\\n                               tabindex=\\\"2\\\">\\n                        <md-icon *ngIf=\\\"isPasswordShow\\\" mdSuffix class=\\\"adf-login-password-icon\\\"\\n                                 data-automation-id=\\\"hide_password\\\" (click)=\\\"toggleShowPassword()\\\">visibility\\n                        </md-icon>\\n                        <md-icon *ngIf=\\\"!isPasswordShow\\\" mdSuffix class=\\\"adf-login-password-icon\\\"\\n                                 data-automation-id=\\\"show_password\\\" (click)=\\\"toggleShowPassword()\\\">visibility_off\\n                        </md-icon>\\n                    </md-input-container>\\n                    <span class=\\\"adf-login-validation\\\" for=\\\"password\\\" *ngIf=\\\"formError.password\\\">\\n                        <span id=\\\"password-required\\\" class=\\\"adf-login-error\\\"\\n                              data-automation-id=\\\"password-required\\\">{{formError.password | translate }}</span>\\n                    </span>\\n                </div>\\n\\n                <!--CUSTOM CONTENT-->\\n                <ng-content></ng-content>\\n\\n                <br>\\n                <button type=\\\"submit\\\" id=\\\"login-button\\\" tabindex=\\\"3\\\"\\n                        class=\\\"adf-login-button\\\"\\n                        md-raised-button color=\\\"primary\\\"\\n                        [class.isChecking]=\\\"actualLoginStep === LoginSteps.Checking\\\"\\n                        [class.isWelcome]=\\\"actualLoginStep === LoginSteps.Welcome\\\"\\n                        data-automation-id=\\\"login-button\\\" [disabled]=\\\"!form.valid\\\">\\n\\n                    <span *ngIf=\\\"actualLoginStep === LoginSteps.Landing\\\" class=\\\"adf-login-button-label\\\">{{ 'LOGIN.BUTTON.LOGIN' | translate }}</span>\\n\\n                    <div *ngIf=\\\"actualLoginStep === LoginSteps.Checking\\\" class=\\\"adf-interactive-login-label\\\">\\n                        <span class=\\\"adf-login-button-label\\\">{{ 'LOGIN.BUTTON.CHECKING' | translate }}</span>\\n                        <md-spinner id=\\\"checking-spinner\\\" class=\\\"adf-login-checking-spinner\\\"></md-spinner>\\n                    </div>\\n\\n                    <div *ngIf=\\\"actualLoginStep === LoginSteps.Welcome\\\" class=\\\"adf-interactive-login-label\\\">\\n                        <span class=\\\"adf-login-button-label\\\">{{ 'LOGIN.BUTTON.WELCOME' | translate }}</span>\\n                        <md-icon class=\\\"welcome-icon\\\">done</md-icon>\\n                    </div>\\n\\n                </button>\\n                <div *ngIf=\\\"showRememberMe\\\" class=\\\"adf-login__remember-me\\\">\\n                    <md-checkbox id=\\\"adf-login-remember\\\" color=\\\"primary\\\" class=\\\"adf-login-rememberme\\\" [checked]=\\\"rememberMe\\\"\\n                                 (change)=\\\"rememberMe = !rememberMe\\\">{{ 'LOGIN.LABEL.REMEMBER' | translate }}\\n                    </md-checkbox>\\n                </div>\\n            </md-card-content>\\n            <md-card-actions *ngIf=\\\"footerTemplate || showLoginActions\\\">\\n\\n                <div class=\\\"adf-login-action-container\\\">\\n                    <!--FOOTER TEMPLATE-->\\n                    <ng-template *ngIf=\\\"footerTemplate\\\"\\n                                 ngFor [ngForOf]=\\\"[data]\\\"\\n                                 [ngForTemplate]=\\\"footerTemplate\\\">\\n                    </ng-template>\\n                    <div class=\\\"adf-login-action\\\" *ngIf=\\\"!footerTemplate && showLoginActions\\\">\\n                        <div id=\\\"adf-login-action-left\\\" class=\\\"adf-login-action-left\\\">\\n                            <a href=\\\"{{needHelpLink}}\\\">{{'LOGIN.ACTION.HELP' | translate }}</a>\\n                        </div>\\n                        <div id=\\\"adf-login-action-right\\\" class=\\\"adf-login-action-right\\\">\\n                            <a href=\\\"{{registerLink}}\\\">{{'LOGIN.ACTION.REGISTER' | translate }}</a>\\n                        </div>\\n                    </div>\\n                </div>\\n            </md-card-actions>\\n\\n        </form>\\n    </md-card>\\n\\n    <div class=\\\"copyright\\\" data-automation-id=\\\"login-copyright\\\">\\n        {{ copyrightText }}\\n    </div>\\n</div>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/login.component.html\n// module id = 10\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/sass-loader/lib/loader.js!./src/components/login.component.scss\n// module id = 11\n// module chunks = 0","\n        var result = require(\"!!../../node_modules/raw-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./login.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/login.component.scss\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/forms\"\n// module id = 13\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/material\"\n// module id = 14\n// module chunks = 0","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CoreModule, TRANSLATION_PROVIDER } from 'ng2-alfresco-core';\n\nimport { LoginComponent } from './src/components/login.component';\nimport { LoginFooterDirective } from './src/directives/login-footer.directive';\nimport { LoginHeaderDirective } from './src/directives/login-header.directive';\nimport { MaterialModule } from './src/material.module';\n\nexport { LoginHeaderDirective } from './src/directives/login-header.directive';\nexport { LoginFooterDirective } from './src/directives/login-footer.directive';\nexport { LoginComponent } from './src/components/login.component';\n\n// Old Deprecated export\nimport { LoginComponent as AlfrescoLoginComponent } from './src/components/login.component';\nexport { LoginComponent as AlfrescoLoginComponent } from './src/components/login.component';\n\nexport const ALFRESCO_LOGIN_DIRECTIVES: any[] = [\n    LoginComponent,\n    LoginFooterDirective,\n    LoginHeaderDirective,\n\n    // Old Deprecated export\n    AlfrescoLoginComponent\n];\n\n@NgModule({\n    imports: [\n        RouterModule,\n        CoreModule,\n        MaterialModule\n    ],\n    declarations: [\n        ...ALFRESCO_LOGIN_DIRECTIVES\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'ng2-alfresco-login',\n                source: 'assets/ng2-alfresco-login'\n            }\n        }\n    ],\n    exports: [\n        ...ALFRESCO_LOGIN_DIRECTIVES,\n        MaterialModule\n    ]\n})\nexport class LoginModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./index.ts"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChEA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AASA;AAoEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAYA;AAGA;AAGA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAqBA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAlTA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;;AACA;AAGA;AADA;AACA;AAAA;AA5CA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAqEA;AApEA;AAwTA;;AAAA;AAxTA;;;;;;;ACtCA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAMA;AAKA;AAKA;AACA;AACA;AAEA;AACA;AACA;AARA;AADA;;AACA;AAHA;AAHA;AACA;AACA;AAOA;AANA;AAYA;;AAAA;AAZA;;;;;;;;;AC5BA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAEA;AAMA;AAKA;AAKA;AACA;AACA;AAEA;AACA;AACA;AARA;AADA;;AACA;AAHA;AAHA;AACA;AACA;AAOA;AANA;AAYA;;AAAA;AAZA;;;;;;;AC5BA;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;ACtCA;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;AAEA;AAaA;AAVA;AAWA;AACA;AAVA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AACA;AAEA;AAAA;AArBA;;;;;;;ACjBA;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AA0BA;AAAA;AAAA;AAAA;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;","sourceRoot":""}