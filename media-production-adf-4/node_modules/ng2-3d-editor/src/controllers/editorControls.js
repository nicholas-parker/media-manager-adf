"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var THREE = require("three");
var EditorControls = (function (_super) {
    __extends(EditorControls, _super);
    function EditorControls(container, camera) {
        var _this = _super.call(this) || this;
        _this.panSpeed = 0.001;
        _this.zoomSpeed = 0.001;
        _this.rotationSpeed = 0.005;
        _this.pointer = new THREE.Vector2();
        _this.pointerOld = new THREE.Vector2();
        _this.STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2 };
        _this.center = new THREE.Vector3();
        _this.vector = new THREE.Vector3();
        _this.spherical = new THREE.Spherical();
        _this.changeEvent = { type: 'change' };
        _this.normalMatrix = new THREE.Matrix3();
        _this.state = _this.STATE.NONE;
        _this.center = new THREE.Vector3();
        _this.camera = camera;
        _this.container = container;
        _this.container.addEventListener('contextmenu', _this.contextmenu.bind(_this), false);
        _this.container.addEventListener('mousedown', _this.onMouseDown.bind(_this), false);
        _this.container.addEventListener('wheel', _this.onMouseWheel.bind(_this), false);
        return _this;
    }
    EditorControls.prototype.onMouseDown = function (event) {
        if (event.button === 0) {
            this.state = this.STATE.ROTATE;
        }
        else if (event.button === 1) {
            this.state = this.STATE.ZOOM;
        }
        else if (event.button === 2) {
            this.state = this.STATE.PAN;
        }
        this.pointerOld.set(event.clientX, event.clientY);
        this.container.addEventListener('mousemove', this.onMouseMove.bind(this), false);
        this.container.addEventListener('mouseup', this.onMouseUp.bind(this), false);
        this.container.addEventListener('mouseout', this.onMouseUp.bind(this), false);
        this.container.addEventListener('dblclick', this.onMouseUp.bind(this), false);
    };
    EditorControls.prototype.onMouseMove = function (event) {
        this.pointer.set(event.clientX, event.clientY);
        var movementX = this.pointer.x - this.pointerOld.x;
        var movementY = this.pointer.y - this.pointerOld.y;
        if (this.state === this.STATE.ROTATE) {
            this.rotate(new THREE.Vector3(-movementX * this.rotationSpeed, -movementY * this.rotationSpeed, 0));
        }
        else if (this.state === this.STATE.ZOOM) {
            this.zoom(new THREE.Vector3(0, 0, movementY));
        }
        else if (this.state === this.STATE.PAN) {
            this.pan(new THREE.Vector3(-movementX, movementY, 0));
        }
        this.pointerOld.set(event.clientX, event.clientY);
    };
    EditorControls.prototype.focus = function (target) {
        var box = new THREE.Box3().setFromObject(target);
        this.camera.lookAt(this.center.copy(box.getCenter()));
        this.dispatchEvent(this.changeEvent);
    };
    EditorControls.prototype.dispatchEvent = function (event) {
        _super.prototype.dispatchEvent.call(this, event);
    };
    EditorControls.prototype.pan = function (delta) {
        var distance = this.camera.position.distanceTo(this.center);
        delta.multiplyScalar(distance * this.panSpeed);
        delta.applyMatrix3(this.normalMatrix.getNormalMatrix(this.camera.matrix));
        this.camera.position.add(delta);
        this.center.add(delta);
        this.dispatchEvent(this.changeEvent);
    };
    EditorControls.prototype.zoom = function (delta) {
        var distance = this.camera.position.distanceTo(this.center);
        delta.multiplyScalar(distance * this.zoomSpeed);
        if (delta.length() > distance) {
            return;
        }
        delta.applyMatrix3(this.normalMatrix.getNormalMatrix(this.camera.matrix));
        this.camera.position.add(delta);
        this.dispatchEvent(this.changeEvent);
    };
    EditorControls.prototype.rotate = function (delta) {
        this.vector.copy(this.camera.position).sub(this.center);
        this.spherical.setFromVector3(this.vector);
        this.spherical.theta += delta.x;
        this.spherical.phi += delta.y;
        this.spherical.makeSafe();
        this.vector.setFromSpherical(this.spherical);
        this.camera.position.copy(this.center).add(this.vector);
        this.camera.lookAt(this.center);
        this.dispatchEvent(this.changeEvent);
    };
    EditorControls.prototype.onMouseWheel = function (event) {
        event.preventDefault();
        this.zoom(new THREE.Vector3(0, 0, event.deltaY));
    };
    EditorControls.prototype.onMouseUp = function () {
        this.container.removeEventListener('mousemove', this.onMouseMove.bind(this), false);
        this.container.removeEventListener('mouseup', this.onMouseUp.bind(this), false);
        this.container.removeEventListener('mouseout', this.onMouseUp.bind(this), false);
        this.container.removeEventListener('dblclick', this.onMouseUp.bind(this), false);
        this.state = this.STATE.NONE;
    };
    EditorControls.prototype.contextmenu = function (event) {
        event.preventDefault();
    };
    return EditorControls;
}(THREE.EventDispatcher));
EditorControls = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [Object, Object])
], EditorControls);
exports.EditorControls = EditorControls;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2VkaXRvckNvbnRyb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0NBQTJDO0FBQzNDLDZCQUErQjtBQUcvQixJQUFhLGNBQWM7SUFBUyxrQ0FBcUI7SUFtQnJELHdCQUFZLFNBQWMsRUFBRSxNQUFXO1FBQXZDLFlBQ0ksaUJBQU8sU0FTVjtRQTNCRCxjQUFRLEdBQVEsS0FBSyxDQUFDO1FBQ3RCLGVBQVMsR0FBUSxLQUFLLENBQUM7UUFDdkIsbUJBQWEsR0FBUSxLQUFLLENBQUM7UUFHM0IsYUFBTyxHQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLGdCQUFVLEdBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEMsV0FBSyxHQUFRLEVBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFDLENBQUM7UUFHcEQsWUFBTSxHQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xDLFlBQU0sR0FBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNsQyxlQUFTLEdBQVEsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFdkMsaUJBQVcsR0FBUSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsQ0FBQztRQUNwQyxrQkFBWSxHQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBSXBDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDN0IsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVsQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixLQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRixLQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRixLQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzs7SUFDbEYsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxLQUFLO1FBQ2IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDbkMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNqQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2hDLENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRUQsb0NBQVcsR0FBWCxVQUFZLEtBQUs7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUVuRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsOEJBQUssR0FBTCxVQUFNLE1BQU07UUFDUixJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsc0NBQWEsR0FBYixVQUFjLEtBQUs7UUFDZixpQkFBTSxhQUFhLFlBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELDRCQUFHLEdBQUgsVUFBSSxLQUFLO1FBQ0wsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1RCxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFMUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCw2QkFBSSxHQUFKLFVBQUssS0FBSztRQUNOLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUQsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWhELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUUxRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxLQUFLO1FBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUUxQixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxxQ0FBWSxHQUFaLFVBQWEsS0FBSztRQUNkLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxrQ0FBUyxHQUFUO1FBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRUQsb0NBQVcsR0FBWCxVQUFZLEtBQUs7UUFDYixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVMLHFCQUFDO0FBQUQsQ0EzSUEsQUEySUMsQ0EzSW1DLEtBQUssQ0FBQyxlQUFlLEdBMkl4RDtBQTNJWSxjQUFjO0lBRDFCLGlCQUFVLEVBQUU7O0dBQ0EsY0FBYyxDQTJJMUI7QUEzSVksd0NBQWMiLCJmaWxlIjoiY29udHJvbGxlcnMvZWRpdG9yQ29udHJvbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFZGl0b3JDb250cm9scyBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgICBwYW5TcGVlZDogYW55ID0gMC4wMDE7XG4gICAgem9vbVNwZWVkOiBhbnkgPSAwLjAwMTtcbiAgICByb3RhdGlvblNwZWVkOiBhbnkgPSAwLjAwNTtcblxuICAgIGNvbnRhaW5lcjogYW55O1xuICAgIHBvaW50ZXI6IGFueSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG4gICAgcG9pbnRlck9sZDogYW55ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcbiAgICBTVEFURTogYW55ID0ge05PTkU6IC0xLCBST1RBVEU6IDAsIFpPT006IDEsIFBBTjogMn07XG4gICAgc3RhdGU6IGFueTtcblxuICAgIGNlbnRlcjogYW55ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICB2ZWN0b3I6IGFueSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgc3BoZXJpY2FsOiBhbnkgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XG4gICAgY2FtZXJhOiBhbnk7XG4gICAgY2hhbmdlRXZlbnQ6IGFueSA9IHt0eXBlOiAnY2hhbmdlJ307XG4gICAgbm9ybWFsTWF0cml4OiBhbnkgPSBuZXcgVEhSRUUuTWF0cml4MygpO1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyOiBhbnksIGNhbWVyYTogYW55KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLlNUQVRFLk5PTkU7XG4gICAgICAgIHRoaXMuY2VudGVyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuICAgICAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5jb250ZXh0bWVudS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25Nb3VzZVdoZWVsLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICB9XG5cbiAgICBvbk1vdXNlRG93bihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5TVEFURS5ST1RBVEU7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuYnV0dG9uID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5TVEFURS5aT09NO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuU1RBVEUuUEFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wb2ludGVyT2xkLnNldChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIH1cblxuICAgIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucG9pbnRlci5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG5cbiAgICAgICAgbGV0IG1vdmVtZW50WCA9IHRoaXMucG9pbnRlci54IC0gdGhpcy5wb2ludGVyT2xkLng7XG4gICAgICAgIGxldCBtb3ZlbWVudFkgPSB0aGlzLnBvaW50ZXIueSAtIHRoaXMucG9pbnRlck9sZC55O1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSB0aGlzLlNUQVRFLlJPVEFURSkge1xuICAgICAgICAgICAgdGhpcy5yb3RhdGUobmV3IFRIUkVFLlZlY3RvcjMoLW1vdmVtZW50WCAqIHRoaXMucm90YXRpb25TcGVlZCwgLW1vdmVtZW50WSAqIHRoaXMucm90YXRpb25TcGVlZCwgMCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuU1RBVEUuWk9PTSkge1xuICAgICAgICAgICAgdGhpcy56b29tKG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIG1vdmVtZW50WSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuU1RBVEUuUEFOKSB7XG4gICAgICAgICAgICB0aGlzLnBhbihuZXcgVEhSRUUuVmVjdG9yMygtbW92ZW1lbnRYLCBtb3ZlbWVudFksIDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG9pbnRlck9sZC5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgfVxuXG4gICAgZm9jdXModGFyZ2V0KSB7XG4gICAgICAgIGxldCBib3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QodGFyZ2V0KTtcbiAgICAgICAgdGhpcy5jYW1lcmEubG9va0F0KHRoaXMuY2VudGVyLmNvcHkoYm94LmdldENlbnRlcigpKSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLmNoYW5nZUV2ZW50KTtcbiAgICB9XG5cbiAgICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHN1cGVyLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIHBhbihkZWx0YSkge1xuICAgICAgICBsZXQgZGlzdGFuY2UgPSB0aGlzLmNhbWVyYS5wb3NpdGlvbi5kaXN0YW5jZVRvKHRoaXMuY2VudGVyKTtcblxuICAgICAgICBkZWx0YS5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSAqIHRoaXMucGFuU3BlZWQpO1xuICAgICAgICBkZWx0YS5hcHBseU1hdHJpeDModGhpcy5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KHRoaXMuY2FtZXJhLm1hdHJpeCkpO1xuXG4gICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLmFkZChkZWx0YSk7XG4gICAgICAgIHRoaXMuY2VudGVyLmFkZChkZWx0YSk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHRoaXMuY2hhbmdlRXZlbnQpO1xuICAgIH1cblxuICAgIHpvb20oZGVsdGEpIHtcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gdGhpcy5jYW1lcmEucG9zaXRpb24uZGlzdGFuY2VUbyh0aGlzLmNlbnRlcik7XG5cbiAgICAgICAgZGVsdGEubXVsdGlwbHlTY2FsYXIoZGlzdGFuY2UgKiB0aGlzLnpvb21TcGVlZCk7XG5cbiAgICAgICAgaWYgKGRlbHRhLmxlbmd0aCgpID4gZGlzdGFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbHRhLmFwcGx5TWF0cml4Myh0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5jYW1lcmEubWF0cml4KSk7XG5cbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uYWRkKGRlbHRhKTtcblxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQodGhpcy5jaGFuZ2VFdmVudCk7XG4gICAgfVxuXG4gICAgcm90YXRlKGRlbHRhKSB7XG4gICAgICAgIHRoaXMudmVjdG9yLmNvcHkodGhpcy5jYW1lcmEucG9zaXRpb24pLnN1Yih0aGlzLmNlbnRlcik7XG5cbiAgICAgICAgdGhpcy5zcGhlcmljYWwuc2V0RnJvbVZlY3RvcjModGhpcy52ZWN0b3IpO1xuXG4gICAgICAgIHRoaXMuc3BoZXJpY2FsLnRoZXRhICs9IGRlbHRhLng7XG4gICAgICAgIHRoaXMuc3BoZXJpY2FsLnBoaSArPSBkZWx0YS55O1xuXG4gICAgICAgIHRoaXMuc3BoZXJpY2FsLm1ha2VTYWZlKCk7XG5cbiAgICAgICAgdGhpcy52ZWN0b3Iuc2V0RnJvbVNwaGVyaWNhbCh0aGlzLnNwaGVyaWNhbCk7XG5cbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uY29weSh0aGlzLmNlbnRlcikuYWRkKHRoaXMudmVjdG9yKTtcblxuICAgICAgICB0aGlzLmNhbWVyYS5sb29rQXQodGhpcy5jZW50ZXIpO1xuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLmNoYW5nZUV2ZW50KTtcbiAgICB9XG5cbiAgICBvbk1vdXNlV2hlZWwoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy56b29tKG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIGV2ZW50LmRlbHRhWSkpO1xuICAgIH1cblxuICAgIG9uTW91c2VVcCgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuU1RBVEUuTk9ORTtcbiAgICB9XG5cbiAgICBjb250ZXh0bWVudShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxufVxuIl19
