"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var editorControls_1 = require("../controllers/editorControls");
var THREE = require('three');
var FBXLoaderService = require('../jsservice/fbxLoader2.service.js');
var TransformControls = require('three-transformcontrols');
var ObjLoaderService = require('../jsservice/objLoader.service');
var MtlLoaderService = require('../jsservice/mtlLoader.service');
var Viewer3DComponent = (function () {
    function Viewer3DComponent() {
        this.enableTransformController = true;
        this.inGenerate = false;
        this.mouseX = 0;
        this.mouseY = 0;
        this.center = new THREE.Vector3();
        this.loading = true;
    }
    Viewer3DComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.log(ObjLoaderService);
        console.log(MtlLoaderService);
        console.log(FBXLoaderService);
        console.log(TransformControls);
        this.container = document.getElementById('viewer-3d');
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000);
        this.camera.position.z = 250;
        this.scene = new THREE.Scene();
        this.lights();
        this.grid();
        this.axisHelper();
        if (!this.extension) {
            this.extension = this.getFileExtension(this.urlFile);
        }
        if (this.extension === 'obj') {
            this.loadObjFormatFile();
        }
        else if (this.extension === 'fbx') {
            this.loadFbxFormatFile();
        }
        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        if (this.clearColor) {
            this.renderer.setClearColor(this.clearColor);
        }
        this.container.appendChild(this.renderer.domElement);
        this.animate();
        if (this.enableTransformController) {
            this.transformControl = new TransformControls(this.camera, this.renderer.domElement);
            this.transformControl.addEventListener('change', this.render.bind(this));
        }
        this.controllers = new editorControls_1.EditorControls(this.container, this.camera);
        window.addEventListener('resize', this.onWindowResize.bind(this), false);
        window.addEventListener('keydown', function (event) {
            switch (event.keyCode) {
                case 81:
                    _this.transformControl.setSpace(_this.transformControl.space === 'local' ? 'world' : 'local');
                    break;
                case 17:
                    _this.transformControl.setTranslationSnap(100);
                    _this.transformControl.setRotationSnap(THREE.Math.degToRad(15));
                    break;
                case 87:
                    _this.transformControl.setMode('translate');
                    break;
                case 69:
                    _this.transformControl.setMode('rotate');
                    break;
                case 82:
                    _this.transformControl.setMode('scale');
                    break;
                case 187:
                case 107:
                    _this.transformControl.setSize(_this.transformControl.size + 0.1);
                    break;
                case 189:
                case 109:
                    _this.transformControl.setSize(Math.max(_this.transformControl.size - 0.1, 0.1));
                    break;
                default:
                    break;
            }
        });
        window.addEventListener('keyup', function (event) {
            switch (event.keyCode) {
                case 17:
                    _this.transformControl.setTranslationSnap(null);
                    _this.transformControl.setRotationSnap(null);
                    break;
                default:
                    break;
            }
        });
    };
    Viewer3DComponent.prototype.lights = function () {
        var ambient = new THREE.AmbientLight(0x444444);
        var directionalLight = new THREE.DirectionalLight(0xffffff, 1);
        directionalLight.position.set(1, 1, 1).normalize();
        var helper = new THREE.DirectionalLightHelper(directionalLight, 5);
        this.scene.add(ambient);
        this.scene.add(helper);
        this.scene.add(directionalLight);
    };
    Viewer3DComponent.prototype.axisHelper = function () {
        var axisHelper = new THREE.AxisHelper(5);
        this.scene.add(axisHelper);
    };
    Viewer3DComponent.prototype.grid = function () {
        var lineMaterial = new THREE.LineBasicMaterial({ color: 0x303030 }), geometry = new THREE.Geometry(), floor = -75, step = 25;
        for (var i = 0; i <= 40; i++) {
            geometry.vertices.push(new THREE.Vector3(-500, floor, i * step - 500));
            geometry.vertices.push(new THREE.Vector3(500, floor, i * step - 500));
            geometry.vertices.push(new THREE.Vector3(i * step - 500, floor, -500));
            geometry.vertices.push(new THREE.Vector3(i * step - 500, floor, 500));
        }
        var line = new THREE.LineSegments(geometry, lineMaterial);
        this.scene.add(line);
    };
    Viewer3DComponent.prototype.loadObjFormatFile = function () {
        var _this = this;
        var mtlLoader = new THREE.MTLLoader();
        this.setDetailLoad('MATERIALS');
        mtlLoader.load(this.urlFile.replace('.obj', '.mtl'), function (materials) {
            _this.loadObj(materials);
        }, function (progress) {
            console.log('progress material loader' + JSON.stringify(progress));
        }, function (error) {
            console.log('error material loader' + error);
            _this.loadObj(null);
        });
    };
    Viewer3DComponent.prototype.loadFbxFormatFile = function () {
        var _this = this;
        this.setDetailLoad('FBX OBJECTS');
        var manager = new THREE.LoadingManager();
        manager.onProgress = function (item, loaded, total) {
            console.log(item, loaded, total);
        };
        var loader = new THREE.FBXLoader(manager);
        loader.load(this.urlFile, function (object) {
            _this.loading = false;
            object.mixer = new THREE.AnimationMixer(object);
            var action = object.mixer.clipAction(object.animations[0]);
            action.play();
            _this.scene.add(object);
            if (_this.enableTransformController) {
                _this.transformControl.attach(object);
                _this.scene.add(_this.transformControl);
            }
        }, function (progress) {
            console.log('progress fbx loader' + JSON.stringify(progress));
        }, function (error) {
            console.log('error' + error);
        });
    };
    Viewer3DComponent.prototype.loadObj = function (materials) {
        var _this = this;
        var objLoader = new THREE.OBJLoader();
        if (materials) {
            materials.preload();
            objLoader.setMaterials(materials);
        }
        this.setDetailLoad('OBJ OBJECTS');
        objLoader.load(this.urlFile, function (object) {
            _this.loading = false;
            _this.scene.add(object);
            if (_this.enableTransformController) {
                _this.transformControl.attach(object);
                _this.scene.add(_this.transformControl);
            }
            _this.cameraPositioning();
        }, function (progress) {
            console.log('progress obj loader' + JSON.stringify(progress));
        }, function (error) {
            console.log('error' + error);
        });
    };
    Viewer3DComponent.prototype.cameraPositioning = function () {
        if (this.initialPositionCamera) {
            this.camera.position.set(this.initialPositionCamera.x, this.initialPositionCamera.y, this.initialPositionCamera.z);
        }
        if (this.initialRotationCamera) {
            this.camera.rotation.set(this.initialRotationCamera.x, this.initialRotationCamera.y, this.initialRotationCamera.z);
        }
        this.camera.lookAt(this.center);
    };
    Viewer3DComponent.prototype.setDetailLoad = function (detail) {
        this.detailLoading = detail;
    };
    ;
    Viewer3DComponent.prototype.animate = function () {
        requestAnimationFrame(this.animate.bind(this));
        this.render();
    };
    Viewer3DComponent.prototype.onWindowResize = function () {
        this.windowHalfX = this.container.offsetWidth / 2;
        this.windowHalfY = this.container.offsetHeight / 2;
        this.camera.aspect = this.container.offsetWidth / this.container.offsetHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(this.container.offsetWidth, this.container.offsetHeight);
    };
    Viewer3DComponent.prototype.render = function () {
        if (this.transformControl) {
            this.transformControl.update();
        }
        this.renderer.render(this.scene, this.camera);
    };
    Viewer3DComponent.prototype.isLoading = function () {
        return this.loading;
    };
    Viewer3DComponent.prototype.getFileExtension = function (fileName) {
        return fileName.split('.').pop().toLowerCase();
    };
    return Viewer3DComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Viewer3DComponent.prototype, "urlFile", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Viewer3DComponent.prototype, "extension", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Viewer3DComponent.prototype, "clearColor", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Viewer3DComponent.prototype, "initialPositionCamera", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Viewer3DComponent.prototype, "initialRotationCamera", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Viewer3DComponent.prototype, "enableTransformController", void 0);
Viewer3DComponent = __decorate([
    core_1.Component({
        selector: 'threed-viewer',
        template: " <div class=\"loader-container\"  *ngIf=\"isLoading()\" >     <div class=\"loader\">         <h1>LOADING {{detailLoading}}</h1>         <span></span>         <span></span>         <span></span>     </div> </div>  <div class=\"viewer-3d-content\">     <div class=\"viewer-3d-row\">         <div class=\"viewer-3d-cell\">             <div id=\"viewer-3d\" class=\"viewer-3d\">             </div>         </div>     </div> </div>",
        styles: [" .viewer-3d-content {     font-family: Monospace;     background-color: #000;     color: #fff;     margin: 0px;     overflow: hidden; }  .viewer-3d-row {     display: -webkit-box;     display: -moz-box;     display: -ms-flexbox;     display: -webkit-flex;     display: flex;      -webkit-box-orient: horizontal;     -moz-box-orient: horizontal;     box-orient: horizontal;     flex-direction: row;      -webkit-box-pack: center;     -moz-box-pack: center;     box-pack: center;     justify-content: center;      -webkit-box-align: center;     -moz-box-align: center;     box-align: center;     align-items: center; }  .viewer-3d-cell {     -webkit-box-flex: 1;     -moz-box-flex: 1;     box-flex: 1;     -webkit-flex: 1 1 auto;     flex: 1 1 auto;      padding: 10px;     margin: 10px;      text-align: center; }  .viewer-3d {     height: 80vh;     max-width: 100%; }  .loader-container{     width: 200px;     height: 200px;     top: 0;     bottom: 0;     margin: auto;     position: absolute;     left: 0;     right: 0; }  .loader{     background:#333;  }  h1{     font-family: 'Actor', sans-serif;     color:#FFF;     font-size:16px;     letter-spacing:1px;     font-weight:200;     text-align:center; } .loader span{     width:16px;     height:16px;     border-radius:50%;     display:inline-block;     position:absolute;     left:50%;     margin-left:-10px;     -webkit-animation:3s infinite linear;     -moz-animation:3s infinite linear;     -o-animation:3s infinite linear;  }   .loader span:nth-child(2){     background:#E84C3D;     -webkit-animation:kiri 1.2s infinite linear;     -moz-animation:kiri 1.2s infinite linear;     -o-animation:kiri 1.2s infinite linear;  } .loader span:nth-child(3){     background:#F1C40F;     z-index:100; } .loader span:nth-child(4){     background:#2FCC71;     -webkit-animation:kanan 1.2s infinite linear;     -moz-animation:kanan 1.2s infinite linear;     -o-animation:kanan 1.2s infinite linear; }   @-webkit-keyframes kanan {     0% {-webkit-transform:translateX(20px);     }      50%{-webkit-transform:translateX(-20px);     }      100%{-webkit-transform:translateX(20px);         z-index:200;     } } @-moz-keyframes kanan {     0% {-moz-transform:translateX(20px);     }      50%{-moz-transform:translateX(-20px);     }      100%{-moz-transform:translateX(20px);         z-index:200;     } } @-o-keyframes kanan {     0% {-o-transform:translateX(20px);     }      50%{-o-transform:translateX(-20px);     }      100%{-o-transform:translateX(20px);         z-index:200;     } }     @-webkit-keyframes kiri {     0% {-webkit-transform:translateX(-20px);         z-index:200;     }     50%{-webkit-transform:translateX(20px);     }     100%{-webkit-transform:translateX(-20px);     } }  @-moz-keyframes kiri {     0% {-moz-transform:translateX(-20px);         z-index:200;     }     50%{-moz-transform:translateX(20px);     }     100%{-moz-transform:translateX(-20px);     } } @-o-keyframes kiri {     0% {-o-transform:translateX(-20px);         z-index:200;     }     50%{-o-transform:translateX(20px);     }     100%{-o-transform:translateX(-20px);     } }"]
    })
], Viewer3DComponent);
exports.Viewer3DComponent = Viewer3DComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
