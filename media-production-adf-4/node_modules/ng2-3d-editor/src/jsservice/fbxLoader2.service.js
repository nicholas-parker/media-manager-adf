"use strict";
var THREE = require("three");
THREE.FBXLoader = function (manager) {
    THREE.Loader.call(this);
    this.manager = (manager !== undefined) ? manager : THREE.DefaultLoadingManager;
    this.fileLoader = new THREE.FileLoader(this.manager);
    this.textureLoader = new THREE.TextureLoader(this.manager);
};
Object.assign(THREE.FBXLoader.prototype, THREE.Loader.prototype);
THREE.FBXLoader.prototype.constructor = THREE.FBXLoader;
Object.assign(THREE.FBXLoader.prototype, {
    load: function (url, onLoad, onProgress, onError) {
        var self = this;
        var resourceDirectory = url.split(/[\\\/]/);
        resourceDirectory.pop();
        resourceDirectory = resourceDirectory.join('/');
        this.fileLoader.load(url, function (text) {
            if (!isFbxFormatASCII(text)) {
                console.error('FBXLoader: FBX Binary format not supported.');
                self.manager.itemError(url);
                return;
            }
            if (getFbxVersion(text) < 7000) {
                console.error('FBXLoader: FBX version not supported for file at ' + url + ', FileVersion: ' + getFbxVersion(text));
                self.manager.itemError(url);
                return;
            }
            var scene = self.parse(text, resourceDirectory);
            onLoad(scene);
        }, onProgress, onError);
    },
    parse: function (FBXText, resourceDirectory) {
        var loader = this;
        var FBXTree = new TextParser().parse(FBXText);
        var connections = parseConnections(FBXTree);
        var textures = parseTextures(FBXTree);
        var materials = parseMaterials(FBXTree, textures, connections);
        var deformerMap = parseDeformers(FBXTree, connections);
        var geometryMap = parseGeometries(FBXTree, connections, deformerMap);
        var sceneGraph = parseScene(FBXTree, connections, deformerMap, geometryMap, materials);
        return sceneGraph;
        function parseConnections(FBXTree) {
            var connectionMap = new Map();
            if ('Connections' in FBXTree) {
                var connectionArray = FBXTree.Connections.properties.connections;
                connectionArray.forEach(function (connection) {
                    if (!connectionMap.has(connection[0])) {
                        connectionMap.set(connection[0], {
                            parents: [],
                            children: []
                        });
                    }
                    var parentRelationship = { ID: connection[1], relationship: connection[2] };
                    connectionMap.get(connection[0]).parents.push(parentRelationship);
                    if (!connectionMap.has(connection[1])) {
                        connectionMap.set(connection[1], {
                            parents: [],
                            children: []
                        });
                    }
                    var childRelationship = { ID: connection[0], relationship: connection[2] };
                    connectionMap.get(connection[1]).children.push(childRelationship);
                });
            }
            return connectionMap;
        }
        function parseTextures(FBXTree) {
            var textureMap = new Map();
            if ('Texture' in FBXTree.Objects.subNodes) {
                var textureNodes = FBXTree.Objects.subNodes.Texture;
                for (var nodeID in textureNodes) {
                    var texture = parseTexture(textureNodes[nodeID]);
                    textureMap.set(parseInt(nodeID), texture);
                }
            }
            return textureMap;
            function parseTexture(textureNode) {
                var FBX_ID = textureNode.id;
                var name = textureNode.name;
                var filePath = textureNode.properties.FileName;
                var split = filePath.split(/[\\\/]/);
                if (split.length > 0) {
                    var fileName = split[split.length - 1];
                }
                else {
                    var fileName = filePath;
                }
                var texture = loader.textureLoader.load(resourceDirectory + '/' + fileName);
                texture.name = name;
                texture.FBX_ID = FBX_ID;
                return texture;
            }
        }
        function parseMaterials(FBXTree, textureMap, connections) {
            var materialMap = new Map();
            if ('Material' in FBXTree.Objects.subNodes) {
                var materialNodes = FBXTree.Objects.subNodes.Material;
                for (var nodeID in materialNodes) {
                    var material = parseMaterial(materialNodes[nodeID], textureMap, connections);
                    materialMap.set(parseInt(nodeID), material);
                }
            }
            return materialMap;
            function parseMaterial(materialNode, textureMap, connections) {
                var FBX_ID = materialNode.id;
                var name = materialNode.attrName;
                var type = materialNode.properties.ShadingModel;
                var children = connections.get(FBX_ID).children;
                var parameters = parseParameters(materialNode.properties, textureMap, children);
                var material;
                switch (type) {
                    case 'phong':
                        material = new THREE.MeshPhongMaterial();
                        break;
                    case 'lambert':
                        material = new THREE.MeshLambertMaterial();
                        break;
                    default:
                        console.warn('No implementation given for material type ' + type + ' in FBXLoader.js.  Defaulting to basic material');
                        material = new THREE.MeshBasicMaterial({ color: 0x3300ff });
                        break;
                }
                material.setValues(parameters);
                material.name = name;
                return material;
                function parseParameters(properties, textureMap, childrenRelationships) {
                    var parameters = {};
                    if (properties.Diffuse) {
                        parameters.color = parseColor(properties.Diffuse);
                    }
                    if (properties.Specular) {
                        parameters.specular = parseColor(properties.Specular);
                    }
                    if (properties.Shininess) {
                        parameters.shininess = properties.Shininess.value;
                    }
                    if (properties.Emissive) {
                        parameters.emissive = parseColor(properties.Emissive);
                    }
                    if (properties.EmissiveFactor) {
                        parameters.emissiveIntensity = properties.EmissiveFactor.value;
                    }
                    if (properties.Opacity) {
                        parameters.opacity = properties.Opacity.value;
                    }
                    if (parameters.opacity < 1.0) {
                        parameters.transparent = true;
                    }
                    childrenRelationships.forEach(function (relationship) {
                        var type = relationship.relationship;
                        switch (type) {
                            case " \"AmbientColor":
                                break;
                            case " \"DiffuseColor":
                                parameters.map = textureMap.get(relationship.ID);
                                break;
                            default:
                                console.warn('Unknown texture application of type ' + type + ', skipping texture');
                                break;
                        }
                    });
                    return parameters;
                }
            }
        }
        function parseDeformers(FBXTree, connections) {
            var skeletonMap = new Map();
            if ('Deformer' in FBXTree.Objects.subNodes) {
                var DeformerNodes = FBXTree.Objects.subNodes.Deformer;
                for (var nodeID in DeformerNodes) {
                    var deformerNode = DeformerNodes[nodeID];
                    if (deformerNode.attrType === 'Skin') {
                        var conns = connections.get(parseInt(nodeID));
                        var skeleton = parseSkeleton(conns, DeformerNodes);
                        skeleton.FBX_ID = parseInt(nodeID);
                        skeletonMap.set(parseInt(nodeID), skeleton);
                    }
                }
            }
            return skeletonMap;
            function parseSkeleton(connections, DeformerNodes) {
                var subDeformers = new Map();
                var subDeformerArray = [];
                connections.children.forEach(function (child) {
                    var subDeformerNode = DeformerNodes[child.ID];
                    var subDeformer = {
                        FBX_ID: child.ID,
                        indices: parseIntArray(subDeformerNode.subNodes.Indexes.properties.a),
                        weights: parseFloatArray(subDeformerNode.subNodes.Weights.properties.a),
                        transform: parseMatrixArray(subDeformerNode.subNodes.Transform.properties.a),
                        transformLink: parseMatrixArray(subDeformerNode.subNodes.TransformLink.properties.a),
                        linkMode: subDeformerNode.properties.Mode
                    };
                    subDeformers.set(child.ID, subDeformer);
                    subDeformerArray.push(subDeformer);
                });
                return {
                    map: subDeformers,
                    array: subDeformerArray,
                    bones: []
                };
            }
        }
        function parseGeometries(FBXTree, connections, deformerMap) {
            var geometryMap = new Map();
            if ('Geometry' in FBXTree.Objects.subNodes) {
                var geometryNodes = FBXTree.Objects.subNodes.Geometry;
                for (var nodeID in geometryNodes) {
                    var relationships = connections.get(parseInt(nodeID));
                    var geo = parseGeometry(geometryNodes[nodeID], relationships, deformerMap);
                    geometryMap.set(parseInt(nodeID), geo);
                }
            }
            return geometryMap;
            function parseGeometry(geometryNode, relationships, deformerMap) {
                if (geometryNode.attrType === 'Mesh') {
                    return parseMeshGeometry(geometryNode, relationships, deformerMap);
                }
                else if (geometryNode.attrType === 'NurbsCurve') {
                    return parseNurbsGeometry(geometryNode, relationships);
                }
                function parseMeshGeometry(geometryNode, relationships, deformerMap) {
                    var FBX_ID = geometryNode.id;
                    var name = geometryNode.attrName;
                    for (var i = 0; i < relationships.children.length; ++i) {
                        if (deformerMap.has(relationships.children[i].ID)) {
                            var deformer = deformerMap.get(relationships.children[i].ID);
                            break;
                        }
                    }
                    var geometry = genGeometry(geometryNode, deformer);
                    return geometry;
                    function genGeometry(geometryNode, deformer) {
                        var geometry = new Geometry();
                        var vertexBuffer = parseFloatArray(geometryNode.subNodes.Vertices.properties.a);
                        var indexBuffer = parseIntArray(geometryNode.subNodes.PolygonVertexIndex.properties.a);
                        if ('LayerElementNormal' in geometryNode.subNodes) {
                            var normalInfo = getNormals(geometryNode);
                        }
                        if ('LayerElementUV' in geometryNode.subNodes) {
                            var uvInfo = getUVs(geometryNode);
                        }
                        if ('LayerElementMaterial' in geometryNode.subNodes) {
                            var materialInfo = getMaterials(geometryNode);
                        }
                        var faceVertexBuffer = [];
                        var polygonIndex = 0;
                        for (var polygonVertexIndex = 0; polygonVertexIndex < indexBuffer.length; ++polygonVertexIndex) {
                            var endOfFace;
                            var vertexIndex = indexBuffer[polygonVertexIndex];
                            if (indexBuffer[polygonVertexIndex] < 0) {
                                vertexIndex = vertexIndex ^ -1;
                                indexBuffer[polygonVertexIndex] = vertexIndex;
                                endOfFace = true;
                            }
                            var vertex = new Vertex();
                            var weightIndices = [];
                            var weights = [];
                            vertex.position.fromArray(vertexBuffer, vertexIndex * 3);
                            if (deformer) {
                                for (var j = 0; j < deformer.array.length; ++j) {
                                    var index = deformer.array[j].indices.findIndex(function (index) {
                                        return index === indexBuffer[polygonVertexIndex];
                                    });
                                    if (index !== -1) {
                                        weights.push(deformer.array[j].weights[index]);
                                        weightIndices.push(j);
                                    }
                                }
                                if (weights.length > 4) {
                                    console.warn('FBXLoader: Vertex has more than 4 skinning weights assigned to vertex.  Deleting additional weights.');
                                    var WIndex = [0, 0, 0, 0];
                                    var Weight = [0, 0, 0, 0];
                                    for (var polygonVertexIndex = 0; polygonVertexIndex < weights.length; ++polygonVertexIndex) {
                                        var currentWeight = weights[polygonVertexIndex];
                                        var currentIndex = weightIndices[polygonVertexIndex];
                                        for (var j = 0; j < Weight.length; ++j) {
                                            if (currentWeight > Weight[j]) {
                                                var tmp = Weight[j];
                                                Weight[j] = currentWeight;
                                                currentWeight = tmp;
                                                tmp = WIndex[j];
                                                WIndex[j] = currentIndex;
                                                currentIndex = tmp;
                                            }
                                        }
                                    }
                                    weightIndices = WIndex;
                                    weights = Weight;
                                }
                                for (var i = weights.length; i < 4; i++) {
                                    weights[i] = 0;
                                    weightIndices[i] = 0;
                                }
                                vertex.skinWeights.fromArray(weights);
                                vertex.skinIndices.fromArray(weightIndices);
                            }
                            if (normalInfo) {
                                vertex.normal.fromArray(getData(polygonVertexIndex, polygonIndex, vertexIndex, normalInfo));
                            }
                            if (uvInfo) {
                                vertex.uv.fromArray(getData(polygonVertexIndex, polygonIndex, vertexIndex, uvInfo));
                            }
                            faceVertexBuffer.push(vertex);
                            if (endOfFace) {
                                var face = new Face();
                                var materials = getData(polygonVertexIndex, polygonIndex, vertexIndex, materialInfo);
                                face.genTrianglesFromVertices(faceVertexBuffer);
                                face.materialIndex = materials[0];
                                geometry.faces.push(face);
                                faceVertexBuffer = [];
                                polygonIndex++;
                                endOfFace = false;
                            }
                        }
                        var bufferInfo = geometry.flattenToBuffers();
                        var geo = new THREE.BufferGeometry();
                        geo.name = geometryNode.name;
                        geo.addAttribute('position', new THREE.BufferAttribute(new Float32Array(bufferInfo.vertexBuffer), 3));
                        if (bufferInfo.normalBuffer.length > 0) {
                            geo.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(bufferInfo.normalBuffer), 3));
                        }
                        if (bufferInfo.uvBuffer.length > 0) {
                            geo.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(bufferInfo.uvBuffer), 2));
                        }
                        if (deformer) {
                            geo.addAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(bufferInfo.skinIndexBuffer), 4));
                            geo.addAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(bufferInfo.skinWeightBuffer), 4));
                            geo.FBX_Deformer = deformer;
                        }
                        var prevMaterialIndex = bufferInfo.materialIndexBuffer[0];
                        var startIndex = 0;
                        for (var materialBufferIndex = 0; materialBufferIndex < bufferInfo.materialIndexBuffer.length; ++materialBufferIndex) {
                            if (bufferInfo.materialIndexBuffer[materialBufferIndex] !== prevMaterialIndex) {
                                geo.addGroup(startIndex, materialBufferIndex - startIndex, prevMaterialIndex);
                                startIndex = materialBufferIndex;
                                prevMaterialIndex = bufferInfo.materialIndexBuffer[materialBufferIndex];
                            }
                        }
                        return geo;
                        function getNormals(geometryNode) {
                            var NormalNode = geometryNode.subNodes.LayerElementNormal[0];
                            var mappingType = NormalNode.properties.MappingInformationType;
                            var referenceType = NormalNode.properties.ReferenceInformationType;
                            var buffer = parseFloatArray(NormalNode.subNodes.Normals.properties.a);
                            var indexBuffer = [];
                            if (referenceType === 'IndexToDirect') {
                                indexBuffer = parseIntArray(NormalNode.subNodes.NormalIndex.properties.a);
                            }
                            return {
                                dataSize: 3,
                                buffer: buffer,
                                indices: indexBuffer,
                                mappingType: mappingType,
                                referenceType: referenceType
                            };
                        }
                        function getUVs(geometryNode) {
                            var UVNode = geometryNode.subNodes.LayerElementUV[0];
                            var mappingType = UVNode.properties.MappingInformationType;
                            var referenceType = UVNode.properties.ReferenceInformationType;
                            var buffer = parseFloatArray(UVNode.subNodes.UV.properties.a);
                            var indexBuffer = [];
                            if (referenceType === 'IndexToDirect') {
                                indexBuffer = parseIntArray(UVNode.subNodes.UVIndex.properties.a);
                            }
                            return {
                                dataSize: 2,
                                buffer: buffer,
                                indices: indexBuffer,
                                mappingType: mappingType,
                                referenceType: referenceType
                            };
                        }
                        function getMaterials(geometryNode) {
                            var MaterialNode = geometryNode.subNodes.LayerElementMaterial[0];
                            var mappingType = MaterialNode.properties.MappingInformationType;
                            var referenceType = MaterialNode.properties.ReferenceInformationType;
                            var materialIndexBuffer = parseIntArray(MaterialNode.subNodes.Materials.properties.a);
                            var materialIndices = [];
                            materialIndexBuffer.forEach(function (materialIndex, index) {
                                materialIndices.push(index);
                            });
                            return {
                                dataSize: 1,
                                buffer: materialIndexBuffer,
                                indices: materialIndices,
                                mappingType: mappingType,
                                referenceType: referenceType
                            };
                        }
                        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
                            var GetData = {
                                ByPolygonVertex: {
                                    Direct: function (polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
                                        return infoObject.buffer.slice((polygonVertexIndex * infoObject.dataSize), (polygonVertexIndex * infoObject.dataSize) + infoObject.dataSize);
                                    },
                                    IndexToDirect: function (polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
                                        var index = infoObject.indices[polygonVertexIndex];
                                        return infoObject.buffer.slice((index * infoObject.dataSize), (index * infoObject.dataSize) + infoObject.dataSize);
                                    }
                                },
                                ByPolygon: {
                                    Direct: function (polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
                                        return infoObject.buffer.slice(polygonIndex * infoObject.dataSize, polygonIndex * infoObject.dataSize + infoObject.dataSize);
                                    },
                                    IndexToDirect: function (polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
                                        var index = infoObject.indices[polygonIndex];
                                        return infoObject.buffer.slice(index * infoObject.dataSize, index * infoObject.dataSize + infoObject.dataSize);
                                    }
                                },
                                AllSame: {
                                    IndexToDirect: function (polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
                                        return infoObject.buffer.slice(infoObject.indices[0] * infoObject.dataSize, infoObject.indices[0] * infoObject.dataSize + infoObject.dataSize);
                                    }
                                }
                            };
                            return GetData[infoObject.mappingType][infoObject.referenceType](polygonVertexIndex, polygonIndex, vertexIndex, infoObject);
                        }
                    }
                }
                function parseNurbsGeometry(geometryNode, relationships) {
                    if (THREE.NURBSCurve === undefined) {
                        console.error("THREE.FBXLoader relies on THREE.NURBSCurve for any nurbs present in the model.  Nurbs will show up as empty geometry.");
                        return new THREE.BufferGeometry();
                    }
                    var order = parseInt(geometryNode.properties.Order);
                    if (isNaN(order)) {
                        console.error("FBXLoader: Invalid Order " + geometryNode.properties.Order + " given for geometry ID: " + geometryNode.id);
                        return new THREE.BufferGeometry();
                    }
                    var knots = parseFloatArray(geometryNode.subNodes.KnotVector.properties.a);
                    var controlPoints = [];
                    var pointsValues = parseFloatArray(geometryNode.subNodes.Points.properties.a);
                    for (var i = 0; i < pointsValues.length; i += 4) {
                        controlPoints.push(new THREE.Vector4(pointsValues[i], pointsValues[i + 1], pointsValues[i + 2], pointsValues[i + 3]));
                    }
                    if (geometryNode.properties.Form === 'Closed') {
                        controlPoints.push(controlPoints[0]);
                    }
                    var curve = new THREE.NURBSCurve(order - 1, knots, controlPoints);
                    var vertices = curve.getPoints(controlPoints.length * 1.5);
                    var vertexBuffer = [];
                    vertices.forEach(function (position) {
                        var array = position.toArray();
                        vertexBuffer = vertexBuffer.concat(array);
                    });
                    var geometry = new THREE.BufferGeometry();
                    geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(vertexBuffer), 3));
                    return geometry;
                }
            }
        }
        function parseScene(FBXTree, connections, deformerMap, geometryMap, materialMap) {
            var sceneGraph = new THREE.Group();
            var ModelNode = FBXTree.Objects.subNodes.Model;
            var modelArray = [];
            var modelMap = new Map();
            for (var nodeID in ModelNode) {
                var id = parseInt(nodeID);
                var node = ModelNode[nodeID];
                var conns = connections.get(id);
                var model = null;
                for (var i = 0; i < conns.parents.length; ++i) {
                    deformerMap.forEach(function (deformer) {
                        if (deformer.map.has(conns.parents[i].ID)) {
                            model = new THREE.Bone();
                            var index = deformer.array.findIndex(function (subDeformer) {
                                return subDeformer.FBX_ID === conns.parents[i].ID;
                            });
                            deformer.bones[index] = model;
                        }
                    });
                }
                if (!model) {
                    switch (node.attrType) {
                        case "Mesh":
                            var geometry = null;
                            var material = null;
                            var materials = [];
                            conns.children.forEach(function (child) {
                                if (geometryMap.has(child.ID)) {
                                    geometry = geometryMap.get(child.ID);
                                }
                                if (materialMap.has(child.ID)) {
                                    materials.push(materialMap.get(child.ID));
                                }
                            });
                            if (materials.length > 1) {
                                material = new THREE.MultiMaterial(materials);
                            }
                            else if (materials.length > 0) {
                                material = materials[0];
                            }
                            else {
                                material = new THREE.MeshBasicMaterial({ color: 0x3300ff });
                            }
                            if (geometry.FBX_Deformer) {
                                materials.forEach(function (material) {
                                    material.skinning = true;
                                });
                                material.skinning = true;
                                model = new THREE.SkinnedMesh(geometry, material);
                            }
                            else {
                                model = new THREE.Mesh(geometry, material);
                            }
                            break;
                        case "NurbsCurve":
                            var geometry = null;
                            conns.children.forEach(function (child) {
                                if (geometryMap.has(child.ID)) {
                                    geometry = geometryMap.get(child.ID);
                                }
                            });
                            material = new THREE.LineBasicMaterial({ color: 0x3300ff, linewidth: 5 });
                            model = new THREE.Line(geometry, material);
                            break;
                        default:
                            model = new THREE.Object3D();
                            break;
                    }
                }
                model.name = node.attrName.replace(/:/, '').replace(/_/, '').replace(/-/, '');
                model.FBX_ID = id;
                modelArray.push(model);
                modelMap.set(id, model);
            }
            modelArray.forEach(function (model) {
                var node = ModelNode[model.FBX_ID];
                if ('Lcl_Translation' in node.properties) {
                    model.position.fromArray(parseFloatArray(node.properties.Lcl_Translation.value));
                }
                if ('Lcl_Rotation' in node.properties) {
                    var rotation = parseFloatArray(node.properties.Lcl_Rotation.value).map(function (value) {
                        return value * Math.PI / 180;
                    });
                    rotation.push('ZYX');
                    model.rotation.fromArray(rotation);
                }
                if ('Lcl_Scaling' in node.properties) {
                    model.scale.fromArray(parseFloatArray(node.properties.Lcl_Scaling.value));
                }
                var conns = connections.get(model.FBX_ID);
                for (var parentIndex = 0; parentIndex < conns.parents.length; parentIndex++) {
                    var pIndex = modelArray.findIndex(function (mod) {
                        return mod.FBX_ID === conns.parents[parentIndex].ID;
                    });
                    if (pIndex > -1) {
                        modelArray[pIndex].add(model);
                        break;
                    }
                }
                if (model.parent === null) {
                    sceneGraph.add(model);
                }
            });
            sceneGraph.updateMatrixWorld(true);
            var BindPoseNode = FBXTree.Objects.subNodes.Pose;
            for (var nodeID in BindPoseNode) {
                if (BindPoseNode[nodeID].attrType === 'BindPose') {
                    BindPoseNode = BindPoseNode[nodeID];
                    break;
                }
            }
            if (BindPoseNode) {
                var PoseNode = BindPoseNode.subNodes.PoseNode;
                var worldMatrices = new Map();
                PoseNode.forEach(function (node) {
                    var rawMatWrd = parseMatrixArray(node.subNodes.Matrix.properties.a);
                    worldMatrices.set(parseInt(node.id), rawMatWrd);
                });
            }
            deformerMap.forEach(function (deformer, FBX_ID) {
                deformer.array.forEach(function (subDeformer, subDeformerIndex) {
                    var bone = deformer.bones[subDeformerIndex];
                    if (!worldMatrices.has(bone.FBX_ID)) {
                        return;
                    }
                    var mat = worldMatrices.get(bone.FBX_ID);
                    bone.matrixWorld.copy(mat);
                });
                deformer.skeleton = new THREE.Skeleton(deformer.bones);
                var conns = connections.get(FBX_ID);
                conns.parents.forEach(function (parent) {
                    if (geometryMap.has(parent.ID)) {
                        var geoID = parent.ID;
                        var geoConns = connections.get(geoID);
                        for (var i = 0; i < geoConns.parents.length; ++i) {
                            if (modelMap.has(geoConns.parents[i].ID)) {
                                var model = modelMap.get(geoConns.parents[i].ID);
                                model.bind(deformer.skeleton, model.matrixWorld);
                                break;
                            }
                        }
                    }
                });
            });
            modelArray.forEach(function (model) {
                var node = ModelNode[model.FBX_ID];
                if ('Lcl_Translation' in node.properties) {
                    model.position.fromArray(parseFloatArray(node.properties.Lcl_Translation.value));
                }
                if ('Lcl_Rotation' in node.properties) {
                    var rotation = parseFloatArray(node.properties.Lcl_Rotation.value).map(function (value) {
                        return value * Math.PI / 180;
                    });
                    rotation.push('ZYX');
                    model.rotation.fromArray(rotation);
                }
                if ('Lcl_Scaling' in node.properties) {
                    model.scale.fromArray(parseFloatArray(node.properties.Lcl_Scaling.value));
                }
            });
            sceneGraph.skeleton = {
                bones: modelArray
            };
            var animations = parseAnimations(FBXTree, connections, sceneGraph);
            addAnimations(sceneGraph, animations);
            return sceneGraph;
        }
        function parseAnimations(FBXTree, connections, sceneGraph) {
            var rawNodes = FBXTree.Objects.subNodes.AnimationCurveNode;
            var rawCurves = FBXTree.Objects.subNodes.AnimationCurve;
            var rawLayers = FBXTree.Objects.subNodes.AnimationLayer;
            var rawStacks = FBXTree.Objects.subNodes.AnimationStack;
            var returnObject = {
                curves: new Map(),
                layers: new Map(),
                stacks: new Map(),
                length: 0,
                fps: 30,
                frames: 0
            };
            var animationCurveNodes = [];
            for (var nodeID in rawNodes) {
                if (nodeID.match(/\d+/)) {
                    var animationNode = parseAnimationNode(FBXTree, rawNodes[nodeID], connections, sceneGraph);
                    animationCurveNodes.push(animationNode);
                }
            }
            var tmpMap = new Map();
            for (var animationCurveNodeIndex = 0; animationCurveNodeIndex < animationCurveNodes.length; ++animationCurveNodeIndex) {
                if (animationCurveNodes[animationCurveNodeIndex] === null) {
                    continue;
                }
                tmpMap.set(animationCurveNodes[animationCurveNodeIndex].id, animationCurveNodes[animationCurveNodeIndex]);
            }
            var animationCurves = [];
            for (nodeID in rawCurves) {
                if (nodeID.match(/\d+/)) {
                    var animationCurve = parseAnimationCurve(rawCurves[nodeID]);
                    animationCurves.push(animationCurve);
                    var firstParentConn = connections.get(animationCurve.id).parents[0];
                    var firstParentID = firstParentConn.ID;
                    var firstParentRelationship = firstParentConn.relationship;
                    var axis = '';
                    if (firstParentRelationship.match(/X/)) {
                        axis = 'x';
                    }
                    else if (firstParentRelationship.match(/Y/)) {
                        axis = 'y';
                    }
                    else if (firstParentRelationship.match(/Z/)) {
                        axis = 'z';
                    }
                    else {
                        continue;
                    }
                    tmpMap.get(firstParentID).curves[axis] = animationCurve;
                }
            }
            tmpMap.forEach(function (curveNode) {
                var id = curveNode.containerBoneID;
                if (!returnObject.curves.has(id)) {
                    returnObject.curves.set(id, { T: null, R: null, S: null });
                }
                returnObject.curves.get(id)[curveNode.attr] = curveNode;
            });
            for (var nodeID in rawLayers) {
                var layer = [];
                var children = connections.get(parseInt(nodeID)).children;
                for (var childIndex = 0; childIndex < children.length; childIndex++) {
                    if (tmpMap.has(children[childIndex].ID)) {
                        var curveNode = tmpMap.get(children[childIndex].ID);
                        var boneID = curveNode.containerBoneID;
                        if (layer[boneID] === undefined) {
                            layer[boneID] = {
                                T: null,
                                R: null,
                                S: null
                            };
                        }
                        layer[boneID][curveNode.attr] = curveNode;
                    }
                }
                returnObject.layers.set(parseInt(nodeID), layer);
            }
            for (var nodeID in rawStacks) {
                var layers = [];
                var children = connections.get(parseInt(nodeID)).children;
                var maxTimeStamp = 0;
                var minTimeStamp = Number.MAX_VALUE;
                for (var childIndex = 0; childIndex < children.length; ++childIndex) {
                    if (returnObject.layers.has(children[childIndex].ID)) {
                        var currentLayer = returnObject.layers.get(children[childIndex].ID);
                        layers.push(currentLayer);
                        currentLayer.forEach(function (layer) {
                            if (layer) {
                                getCurveNodeMaxMinTimeStamps(layer);
                            }
                            function getCurveNodeMaxMinTimeStamps(layer) {
                                function getCurveMaxMinTimeStamp(curve) {
                                    function getCurveAxisMaxMinTimeStamps(axis) {
                                        maxTimeStamp = axis.times[axis.times.length - 1] > maxTimeStamp ? axis.times[axis.times.length - 1] : maxTimeStamp;
                                        minTimeStamp = axis.times[0] < minTimeStamp ? axis.times[0] : minTimeStamp;
                                    }
                                    if (curve.x) {
                                        getCurveAxisMaxMinTimeStamps(curve.x);
                                    }
                                    if (curve.y) {
                                        getCurveAxisMaxMinTimeStamps(curve.y);
                                    }
                                    if (curve.z) {
                                        getCurveAxisMaxMinTimeStamps(curve.z);
                                    }
                                }
                                if (layer.R) {
                                    getCurveMaxMinTimeStamp(layer.R.curves);
                                }
                                if (layer.S) {
                                    getCurveMaxMinTimeStamp(layer.S.curves);
                                }
                                if (layer.T) {
                                    getCurveMaxMinTimeStamp(layer.T.curves);
                                }
                            }
                        });
                    }
                }
                if (maxTimeStamp > minTimeStamp) {
                    returnObject.stacks.set(parseInt(nodeID), {
                        name: rawStacks[nodeID].attrName,
                        layers: layers,
                        length: maxTimeStamp - minTimeStamp,
                        frames: (maxTimeStamp - minTimeStamp) * 30
                    });
                }
            }
            return returnObject;
            function parseAnimationNode(FBXTree, animationCurveNode, connections, sceneGraph) {
                var returnObject = {
                    id: animationCurveNode.id,
                    attr: animationCurveNode.attrName,
                    internalID: animationCurveNode.id,
                    attrX: false,
                    attrY: false,
                    attrZ: false,
                    containerBoneID: -1,
                    containerID: -1,
                    curves: {
                        x: null,
                        y: null,
                        z: null
                    }
                };
                if (returnObject.attr.match(/S|R|T/)) {
                    for (var attributeKey in animationCurveNode.properties) {
                        if (attributeKey.match(/X/)) {
                            returnObject.attrX = true;
                        }
                        if (attributeKey.match(/Y/)) {
                            returnObject.attrY = true;
                        }
                        if (attributeKey.match(/Z/)) {
                            returnObject.attrZ = true;
                        }
                    }
                }
                else {
                    return null;
                }
                var conns = connections.get(returnObject.id);
                var containerIndices = conns.parents;
                for (var containerIndicesIndex = containerIndices.length - 1; containerIndicesIndex >= 0; --containerIndicesIndex) {
                    var boneID = sceneGraph.skeleton.bones.findIndex(function (bone) {
                        return bone.FBX_ID === containerIndices[containerIndicesIndex].ID;
                    });
                    if (boneID > -1) {
                        returnObject.containerBoneID = boneID;
                        returnObject.containerID = containerIndices[containerIndicesIndex].ID;
                        break;
                    }
                }
                return returnObject;
            }
            function parseAnimationCurve(animationCurve) {
                return {
                    version: null,
                    id: animationCurve.id,
                    internalID: animationCurve.id,
                    times: parseFloatArray(animationCurve.subNodes.KeyTime.properties.a).map(function (time) {
                        return ConvertFBXTimeToSeconds(time);
                    }),
                    values: parseFloatArray(animationCurve.subNodes.KeyValueFloat.properties.a),
                    attrFlag: parseIntArray(animationCurve.subNodes.KeyAttrFlags.properties.a),
                    attrData: parseFloatArray(animationCurve.subNodes.KeyAttrDataFloat.properties.a)
                };
            }
        }
        function addAnimations(group, animations) {
            if (group.animations === undefined) {
                group.animations = [];
            }
            animations.stacks.forEach(function (stack) {
                var animationData = {
                    name: stack.name,
                    fps: 30,
                    length: stack.length,
                    hierarchy: []
                };
                var bones = group.skeleton.bones;
                bones.forEach(function (bone) {
                    var name = bone.name.replace(/.*:/, '');
                    var parentIndex = bones.findIndex(function (parentBone) {
                        return bone.parent === parentBone;
                    });
                    animationData.hierarchy.push({ parent: parentIndex, name: name, keys: [] });
                });
                for (var frame = 0; frame < stack.frames; frame++) {
                    bones.forEach(function (bone, boneIndex) {
                        var animationNode = stack.layers[0][boneIndex];
                        animationData.hierarchy.forEach(function (node) {
                            if (node.name === bone.name) {
                                node.keys.push(generateKey(animationNode, bone, frame));
                            }
                        });
                    });
                }
                group.animations.push(THREE.AnimationClip.parseAnimation(animationData, bones));
                function generateKey(animationNode, bone, frame) {
                    var key = {
                        time: frame / animations.fps,
                        pos: bone.position.toArray(),
                        rot: bone.quaternion.toArray(),
                        scl: bone.scale.toArray()
                    };
                    if (animationNode === undefined) {
                        return key;
                    }
                    try {
                        if (hasCurve(animationNode, 'T') && hasKeyOnFrame(animationNode.T, frame)) {
                            key.pos = [animationNode.T.curves.x.values[frame], animationNode.T.curves.y.values[frame], animationNode.T.curves.z.values[frame]];
                        }
                        if (hasCurve(animationNode, 'R') && hasKeyOnFrame(animationNode.R, frame)) {
                            var rotationX = degreeToRadian(animationNode.R.curves.x.values[frame]);
                            var rotationY = degreeToRadian(animationNode.R.curves.y.values[frame]);
                            var rotationZ = degreeToRadian(animationNode.R.curves.z.values[frame]);
                            var euler = new THREE.Euler(rotationX, rotationY, rotationZ, 'ZYX');
                            key.rot = new THREE.Quaternion().setFromEuler(euler).toArray();
                        }
                        if (hasCurve(animationNode, 'S') && hasKeyOnFrame(animationNode.S, frame)) {
                            key.scl = [animationNode.S.curves.x.values[frame], animationNode.S.curves.y.values[frame], animationNode.S.curves.z.values[frame]];
                        }
                    }
                    catch (error) {
                        console.log(bone);
                        console.log(error);
                    }
                    return key;
                    function hasCurve(animationNode, attribute) {
                        if (animationNode === undefined) {
                            return false;
                        }
                        var attributeNode = animationNode[attribute];
                        if (!attributeNode) {
                            return false;
                        }
                        return ['x', 'y', 'z'].every(function (key) {
                            return attributeNode.curves[key] !== undefined;
                        });
                    }
                    function hasKeyOnFrame(attributeNode, frame) {
                        return ['x', 'y', 'z'].every(function (key) {
                            return isKeyExistOnFrame(attributeNode.curves[key], frame);
                            function isKeyExistOnFrame(curve, frame) {
                                return curve.values[frame] !== undefined;
                            }
                        });
                    }
                }
            });
        }
        function parseVector3(property) {
            return new THREE.Vector3(parseFloat(property.value.x), parseFloat(property.value.y), parseFloat(property.value.z));
        }
        function parseColor(property) {
            return new THREE.Color().fromArray(parseVector3(property).toArray());
        }
    }
});
function Vertex() {
    this.position = new THREE.Vector3();
    this.normal = new THREE.Vector3();
    this.uv = new THREE.Vector2();
    this.skinIndices = new THREE.Vector4(0, 0, 0, 0);
    this.skinWeights = new THREE.Vector4(0, 0, 0, 0);
}
Object.assign(Vertex.prototype, {
    copy: function (target) {
        var returnVar = target || new Vertex();
        returnVar.position.copy(this.position);
        returnVar.normal.copy(this.normal);
        returnVar.uv.copy(this.uv);
        returnVar.skinIndices.copy(this.skinIndices);
        returnVar.skinWeights.copy(this.skinWeights);
        return returnVar;
    },
    flattenToBuffers: function () {
        var vertexBuffer = this.position.toArray();
        var normalBuffer = this.normal.toArray();
        var uvBuffer = this.uv.toArray();
        var skinIndexBuffer = this.skinIndices.toArray();
        var skinWeightBuffer = this.skinWeights.toArray();
        return {
            vertexBuffer: vertexBuffer,
            normalBuffer: normalBuffer,
            uvBuffer: uvBuffer,
            skinIndexBuffer: skinIndexBuffer,
            skinWeightBuffer: skinWeightBuffer,
        };
    }
});
function Triangle() {
    this.vertices = [];
}
Object.assign(Triangle.prototype, {
    copy: function (target) {
        var returnVar = target || new Triangle();
        for (var i = 0; i < this.vertices.length; ++i) {
            this.vertices[i].copy(returnVar.vertices[i]);
        }
        return returnVar;
    },
    flattenToBuffers: function () {
        var vertexBuffer = [];
        var normalBuffer = [];
        var uvBuffer = [];
        var skinIndexBuffer = [];
        var skinWeightBuffer = [];
        this.vertices.forEach(function (vertex) {
            var flatVertex = vertex.flattenToBuffers();
            vertexBuffer = vertexBuffer.concat(flatVertex.vertexBuffer);
            normalBuffer = normalBuffer.concat(flatVertex.normalBuffer);
            uvBuffer = uvBuffer.concat(flatVertex.uvBuffer);
            skinIndexBuffer = skinIndexBuffer.concat(flatVertex.skinIndexBuffer);
            skinWeightBuffer = skinWeightBuffer.concat(flatVertex.skinWeightBuffer);
        });
        return {
            vertexBuffer: vertexBuffer,
            normalBuffer: normalBuffer,
            uvBuffer: uvBuffer,
            skinIndexBuffer: skinIndexBuffer,
            skinWeightBuffer: skinWeightBuffer,
        };
    }
});
function Face() {
    this.triangles = [];
    this.materialIndex = 0;
}
Object.assign(Face.prototype, {
    copy: function (target) {
        var returnVar = target || new Face();
        for (var i = 0; i < this.triangles.length; ++i) {
            this.triangles[i].copy(returnVar.triangles[i]);
        }
        returnVar.materialIndex = this.materialIndex;
        return returnVar;
    },
    genTrianglesFromVertices: function (vertexArray) {
        for (var i = 2; i < vertexArray.length; ++i) {
            var triangle = new Triangle();
            triangle.vertices[0] = vertexArray[0];
            triangle.vertices[1] = vertexArray[i - 1];
            triangle.vertices[2] = vertexArray[i];
            this.triangles.push(triangle);
        }
    },
    flattenToBuffers: function () {
        var vertexBuffer = [];
        var normalBuffer = [];
        var uvBuffer = [];
        var skinIndexBuffer = [];
        var skinWeightBuffer = [];
        var materialIndexBuffer = [];
        var materialIndex = this.materialIndex;
        this.triangles.forEach(function (triangle) {
            var flatTriangle = triangle.flattenToBuffers();
            vertexBuffer = vertexBuffer.concat(flatTriangle.vertexBuffer);
            normalBuffer = normalBuffer.concat(flatTriangle.normalBuffer);
            uvBuffer = uvBuffer.concat(flatTriangle.uvBuffer);
            skinIndexBuffer = skinIndexBuffer.concat(flatTriangle.skinIndexBuffer);
            skinWeightBuffer = skinWeightBuffer.concat(flatTriangle.skinWeightBuffer);
            materialIndexBuffer = materialIndexBuffer.concat([materialIndex, materialIndex, materialIndex]);
        });
        return {
            vertexBuffer: vertexBuffer,
            normalBuffer: normalBuffer,
            uvBuffer: uvBuffer,
            skinIndexBuffer: skinIndexBuffer,
            skinWeightBuffer: skinWeightBuffer,
            materialIndexBuffer: materialIndexBuffer
        };
    }
});
function Geometry() {
    this.faces = [];
    this.skeleton = null;
}
Object.assign(Geometry.prototype, {
    flattenToBuffers: function () {
        var vertexBuffer = [];
        var normalBuffer = [];
        var uvBuffer = [];
        var skinIndexBuffer = [];
        var skinWeightBuffer = [];
        var materialIndexBuffer = [];
        this.faces.forEach(function (face) {
            var flatFace = face.flattenToBuffers();
            vertexBuffer = vertexBuffer.concat(flatFace.vertexBuffer);
            normalBuffer = normalBuffer.concat(flatFace.normalBuffer);
            uvBuffer = uvBuffer.concat(flatFace.uvBuffer);
            skinIndexBuffer = skinIndexBuffer.concat(flatFace.skinIndexBuffer);
            skinWeightBuffer = skinWeightBuffer.concat(flatFace.skinWeightBuffer);
            materialIndexBuffer = materialIndexBuffer.concat(flatFace.materialIndexBuffer);
        });
        return {
            vertexBuffer: vertexBuffer,
            normalBuffer: normalBuffer,
            uvBuffer: uvBuffer,
            skinIndexBuffer: skinIndexBuffer,
            skinWeightBuffer: skinWeightBuffer,
            materialIndexBuffer: materialIndexBuffer
        };
    }
});
function TextParser() { }
Object.assign(TextParser.prototype, {
    getPrevNode: function () {
        return this.nodeStack[this.currentIndent - 2];
    },
    getCurrentNode: function () {
        return this.nodeStack[this.currentIndent - 1];
    },
    getCurrentProp: function () {
        return this.currentProp;
    },
    pushStack: function (node) {
        this.nodeStack.push(node);
        this.currentIndent += 1;
    },
    popStack: function () {
        this.nodeStack.pop();
        this.currentIndent -= 1;
    },
    setCurrentProp: function (val, name) {
        this.currentProp = val;
        this.currentPropName = name;
    },
    parse: function (text) {
        this.currentIndent = 0;
        this.allNodes = new FBXTree();
        this.nodeStack = [];
        this.currentProp = [];
        this.currentPropName = '';
        var split = text.split("\n");
        for (var line in split) {
            var l = split[line];
            if (l.match(/^[\s\t]*;/)) {
                continue;
            }
            if (l.match(/^[\s\t]*$/)) {
                continue;
            }
            var beginningOfNodeExp = new RegExp("^\\t{" + this.currentIndent + "}(\\w+):(.*){", '');
            var match = l.match(beginningOfNodeExp);
            if (match) {
                var nodeName = match[1].trim().replace(/^"/, '').replace(/"$/, "");
                var nodeAttrs = match[2].split(',').map(function (element) {
                    return element.trim().replace(/^"/, '').replace(/"$/, '');
                });
                this.parseNodeBegin(l, nodeName, nodeAttrs || null);
                continue;
            }
            var propExp = new RegExp("^\\t{" + (this.currentIndent) + "}(\\w+):[\\s\\t\\r\\n](.*)");
            var match = l.match(propExp);
            if (match) {
                var propName = match[1].replace(/^"/, '').replace(/"$/, "").trim();
                var propValue = match[2].replace(/^"/, '').replace(/"$/, "").trim();
                this.parseNodeProperty(l, propName, propValue);
                continue;
            }
            var endOfNodeExp = new RegExp("^\\t{" + (this.currentIndent - 1) + "}}");
            if (l.match(endOfNodeExp)) {
                this.nodeEnd();
                continue;
            }
            if (l.match(/^[^\s\t}]/)) {
                this.parseNodePropertyContinued(l);
            }
        }
        return this.allNodes;
    },
    parseNodeBegin: function (line, nodeName, nodeAttrs) {
        var node = { 'name': nodeName, properties: {}, 'subNodes': {} };
        var attrs = this.parseNodeAttr(nodeAttrs);
        var currentNode = this.getCurrentNode();
        if (this.currentIndent === 0) {
            this.allNodes.add(nodeName, node);
        }
        else {
            if (nodeName in currentNode.subNodes) {
                var tmp = currentNode.subNodes[nodeName];
                if (this.isFlattenNode(currentNode.subNodes[nodeName])) {
                    if (attrs.id === '') {
                        currentNode.subNodes[nodeName] = [];
                        currentNode.subNodes[nodeName].push(tmp);
                    }
                    else {
                        currentNode.subNodes[nodeName] = {};
                        currentNode.subNodes[nodeName][tmp.id] = tmp;
                    }
                }
                if (attrs.id === '') {
                    currentNode.subNodes[nodeName].push(node);
                }
                else {
                    currentNode.subNodes[nodeName][attrs.id] = node;
                }
            }
            else if (typeof attrs.id === 'number' || attrs.id.match(/^\d+$/)) {
                currentNode.subNodes[nodeName] = {};
                currentNode.subNodes[nodeName][attrs.id] = node;
            }
            else {
                currentNode.subNodes[nodeName] = node;
            }
        }
        if (nodeAttrs) {
            node.id = attrs.id;
            node.attrName = attrs.name;
            node.attrType = attrs.type;
        }
        this.pushStack(node);
    },
    parseNodeAttr: function (attrs) {
        var id = attrs[0];
        if (attrs[0] !== "") {
            id = parseInt(attrs[0]);
            if (isNaN(id)) {
                id = attrs[0];
            }
        }
        var name;
        var type;
        if (attrs.length > 1) {
            name = attrs[1].replace(/^(\w+)::/, '');
            type = attrs[2];
        }
        return { id: id, name: name || '', type: type || '' };
    },
    parseNodeProperty: function (line, propName, propValue) {
        var currentNode = this.getCurrentNode();
        var parentName = currentNode.name;
        if (parentName !== undefined) {
            var propMatch = parentName.match(/Properties(\d)+/);
            if (propMatch) {
                this.parseNodeSpecialProperty(line, propName, propValue);
                return;
            }
        }
        if (propName == 'C') {
            var connProps = propValue.split(',').slice(1);
            var from = parseInt(connProps[0]);
            var to = parseInt(connProps[1]);
            var rest = propValue.split(',').slice(3);
            propName = 'connections';
            propValue = [from, to];
            propValue = propValue.concat(rest);
            if (currentNode.properties[propName] === undefined) {
                currentNode.properties[propName] = [];
            }
        }
        if (propName == 'Node') {
            var id = parseInt(propValue);
            currentNode.properties.id = id;
            currentNode.id = id;
        }
        if (propName in currentNode.properties) {
            if (Array.isArray(currentNode.properties[propName])) {
                currentNode.properties[propName].push(propValue);
            }
            else {
                currentNode.properties[propName] += propValue;
            }
        }
        else {
            if (Array.isArray(currentNode.properties[propName])) {
                currentNode.properties[propName].push(propValue);
            }
            else {
                currentNode.properties[propName] = propValue;
            }
        }
        this.setCurrentProp(currentNode.properties, propName);
    },
    parseNodePropertyContinued: function (line) {
        this.currentProp[this.currentPropName] += line;
    },
    parseNodeSpecialProperty: function (line, propName, propValue) {
        var props = propValue.split('",').map(function (element) {
            return element.trim().replace(/^\"/, '').replace(/\s/, '_');
        });
        var innerPropName = props[0];
        var innerPropType1 = props[1];
        var innerPropType2 = props[2];
        var innerPropFlag = props[3];
        var innerPropValue = props[4];
        switch (innerPropType1) {
            case "int":
                innerPropValue = parseInt(innerPropValue);
                break;
            case "double":
                innerPropValue = parseFloat(innerPropValue);
                break;
            case "ColorRGB":
            case "Vector3D":
                var tmp = innerPropValue.split(',');
                innerPropValue = new THREE.Vector3(tmp[0], tmp[1], tmp[2]);
                break;
        }
        this.getPrevNode().properties[innerPropName] = {
            'type': innerPropType1,
            'type2': innerPropType2,
            'flag': innerPropFlag,
            'value': innerPropValue
        };
        this.setCurrentProp(this.getPrevNode().properties, innerPropName);
    },
    nodeEnd: function () {
        this.popStack();
    },
    isFlattenNode: function (node) {
        return ('subNodes' in node && 'properties' in node) ? true : false;
    }
});
function FBXTree() { }
Object.assign(FBXTree.prototype, {
    add: function (key, val) {
        this[key] = val;
    },
    searchConnectionParent: function (id) {
        if (this.__cache_search_connection_parent === undefined) {
            this.__cache_search_connection_parent = [];
        }
        if (this.__cache_search_connection_parent[id] !== undefined) {
            return this.__cache_search_connection_parent[id];
        }
        else {
            this.__cache_search_connection_parent[id] = [];
        }
        var conns = this.Connections.properties.connections;
        var results = [];
        for (var i = 0; i < conns.length; ++i) {
            if (conns[i][0] == id) {
                var res = conns[i][1] === 0 ? -1 : conns[i][1];
                results.push(res);
            }
        }
        if (results.length > 0) {
            this.__cache_search_connection_parent[id] = this.__cache_search_connection_parent[id].concat(results);
            return results;
        }
        else {
            this.__cache_search_connection_parent[id] = [-1];
            return [-1];
        }
    },
    searchConnectionChildren: function (id) {
        if (this.__cache_search_connection_children === undefined) {
            this.__cache_search_connection_children = [];
        }
        if (this.__cache_search_connection_children[id] !== undefined) {
            return this.__cache_search_connection_children[id];
        }
        else {
            this.__cache_search_connection_children[id] = [];
        }
        var conns = this.Connections.properties.connections;
        var res = [];
        for (var i = 0; i < conns.length; ++i) {
            if (conns[i][1] == id) {
                res.push(conns[i][0] === 0 ? -1 : conns[i][0]);
            }
        }
        if (res.length > 0) {
            this.__cache_search_connection_children[id] = this.__cache_search_connection_children[id].concat(res);
            return res;
        }
        else {
            this.__cache_search_connection_children[id] = [];
            return [];
        }
    },
    searchConnectionType: function (id, to) {
        var key = id + ',' + to;
        if (this.__cache_search_connection_type === undefined) {
            this.__cache_search_connection_type = {};
        }
        if (this.__cache_search_connection_type[key] !== undefined) {
            return this.__cache_search_connection_type[key];
        }
        else {
            this.__cache_search_connection_type[key] = '';
        }
        var conns = this.Connections.properties.connections;
        for (var i = 0; i < conns.length; ++i) {
            if (conns[i][0] == id && conns[i][1] == to) {
                this.__cache_search_connection_type[key] = conns[i][2];
                return conns[i][2];
            }
        }
        this.__cache_search_connection_type[id] = null;
        return null;
    }
});
function isFbxFormatASCII(text) {
    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\', 'F', 'B', 'X', '\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\', '\\'];
    var cursor = 0;
    var read = function (offset) {
        var result = text[offset - 1];
        text = text.slice(cursor + offset);
        cursor++;
        return result;
    };
    for (var i = 0; i < CORRECT.length; ++i) {
        var num = read(1);
        if (num == CORRECT[i]) {
            return false;
        }
    }
    return true;
}
function getFbxVersion(text) {
    var versionRegExp = /FBXVersion: (\d+)/;
    var match = text.match(versionRegExp);
    if (match) {
        var version = parseInt(match[1]);
        return version;
    }
    throw new Error('FBXLoader: Cannot find the version number for the file given.');
}
function ConvertFBXTimeToSeconds(time) {
    return time / 46186158000;
}
function parseFloatArray(floatString) {
    return floatString.split(',').map(function (stringValue) {
        return parseFloat(stringValue);
    });
}
function parseIntArray(intString) {
    return intString.split(',').map(function (stringValue) {
        return parseInt(stringValue);
    });
}
function parseMatrixArray(floatString) {
    return new THREE.Matrix4().fromArray(parseFloatArray(floatString));
}
function degreeToRadian(value) {
    return value * Math.PI / 180;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
